/// <summary>
/// Schlumberger Private
/// Copyright 2018 Schlumberger.All rights reserved in Schlumberger
/// authored and generated code(including the selection and arrangement of
/// the source code base regardless of the authorship of individual files),
/// but not including any copyright interest(s) owned by a third party
/// related to source code or object code authored or generated by
/// non-Schlumberger personnel.
/// This source code includes Schlumberger confidential and/or proprietary
/// information and may include Schlumberger trade secrets.Any use,
/// disclosure and/or reproduction is prohibited unless authorized in
/// writing.
/// </summary>

#region namespace
using FluentAssertions;
using FMP.Model.ActivityMonitorDataModel;
using FMP.Model.SearchFavoritesDataModel;
using FMP.Model.WorkStationDataModel;
using FMP.Repository.ActionAndAttribute.Interface;
using FMP.Service.ActionAndAttribute;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using System.Collections;
using System.Collections.Generic;
using System.Threading.Tasks;
#endregion

namespace FMP.Service.Test.Services
{
    [TestClass]
   public class ActionAndAttributeServiceTest
    {
        protected MockRepository mockRepository;
        protected Mock<IWorkStationRepository> mockActionAndAttributeRepository;

        [TestInitialize]
        public void TestInitialize()
        {
            //Create Mocks
            mockRepository = new MockRepository(MockBehavior.Strict);
            mockActionAndAttributeRepository = mockRepository.Create<IWorkStationRepository>();
        }

        [TestCleanup]
        public void TestCleanup()
        {
            mockRepository.VerifyAll();
        }

        /// <summary>
        /// setup mock WorkStationService dependencies.
        /// </summary>
        /// <returns></returns>
        private ActionAndAttributeService ActionAndAttributeService()
        {
            return new ActionAndAttributeService(
                mockActionAndAttributeRepository.Object);
        }

        /// <summary>
        /// Save  action And Attribute test. 
        /// </summary>
        /// <returns>true/false</returns>
        [TestMethod]
        public void SaveActionAndAttribute_ReturnsTrueorFalse()
        {
            //Arrange
            var actionandattributeservice = ActionAndAttributeService();
            var dropdwonobj = new Model.WorkStationDataModel.ActionAndAttribute
            {
                ID = "1",
                Value = "test"
            };
            var dropdowntype = "ActionTest";

            mockActionAndAttributeRepository.Setup(s => s.InsertActionAndAttributeAsync(dropdwonobj, dropdowntype))
                .Returns(Task.FromResult(true));

            //Act
            var result = actionandattributeservice.SaveActionAndAttribute(dropdwonobj, dropdowntype);

            //Assert
            result.Should().NotBeNull();
            (result.Result).Should().Equals(true);
        }

        /// <summary>
        /// Get  action And Attribute test. 
        /// </summary>
        /// <returns>true/false</returns>
        [TestMethod]
        public void GerActionAndAttribute_ReturnsList()
        {
            //Arrange
            var actionandattributeservice = ActionAndAttributeService();
            var actionandattributetype = "Action1";
            var actionandattributeList = new List<Model.WorkStationDataModel.ActionAndAttribute>
                {
                     new Model.WorkStationDataModel.ActionAndAttribute
                     {
                          ID = "1",
                          Value = "Active"
                     }
                };

            mockActionAndAttributeRepository.Setup(s => s.getAttributeAndAction(actionandattributetype))
                .Returns(Task.FromResult(actionandattributeList));

            //Act
            var result = actionandattributeservice.getAttributeAndAction(actionandattributetype);

            //Assert
            result.Should().NotBeNull();
            (result.Result).Should().Equals(true);
        }
    }
}
