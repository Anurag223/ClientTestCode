#region Header

/// <summary>
/// Schlumberger Private
/// Copyright 2018 Schlumberger.All rights reserved in Schlumberger
/// authored and generated code(including the selection and arrangement of
/// the source code base regardless of the authorship of individual files),
/// but not including any copyright interest(s) owned by a third party
/// related to source code or object code authored or generated by
/// non-Schlumberger personnel.
/// This source code includes Schlumberger confidential and/or proprietary
/// information and may include Schlumberger trade secrets.Any use,
/// disclosure and/or reproduction is prohibited unless authorized in
/// writing.
/// </summary>

#endregion

using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using FizzWare.NBuilder;
using FluentAssertions;
using FMP.Model.LayoutDataModel;
using FMP.Model.UserProfileDataModel;
using FMP.Service.UserProfile;
using FMP.Service.UserProfile.Interface;

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using FMPLayout = FMP.Model.LayoutDataModel.Layout;
using FMPUserProfile = FMP.Model.UserProfileDataModel.UserProfile;
using FMPUser = FMP.Model.UserDataModel.User;
#pragma warning disable 1591

namespace FMP.Service.Test
{
    [TestClass]
    public class UserProfileServiceTest2
    {
        protected Mock<ICommandHandler<ICreateCommand<FMPLayout>>> CreateLayout;
        protected Mock<ICommandHandler<ICreateCommand<UserLayoutPreference>>> CreateUserLayoutPreference;
        protected Mock<ICommandHandler<ICreateCommand<FMPUserProfile>>> CreateUserProfile;
        protected Mock<IQueryHandler<IQuery<FMPLayout>, FMPLayout>> LayoutForAppAndUser;
        protected MockRepository MockRepository;
        protected Mock<ICommandHandler<IUpdateCommand<FMPLayout>>> UpdateLayout;
        protected Mock<ICommandHandler<IUpdateCommand<UserLayoutPreference>>> UpdateUserLayoutPreference;
        protected Mock<IQueryHandler<IQuery<FMPUserProfile>, bool>> UserExists;
        protected Mock<IQueryHandler<IQuery<UserLayoutPreference>, UserLayoutPreference>> UserLayoutPreference;
        protected Mock<IQueryHandler<IQuery<FMPLayout>, IReadOnlyList<FMPLayout>>> UserLayouts;
        protected Mock<ICommandHandler<IUpdateCommand<FMPUserProfile>>> UpdateUserProfile;
        protected Mock<IQueryHandler<IQuery<FMPUserProfile>, FMPUserProfile>> GetUserProfile;
        protected Mock<IQueryHandler<IQuery<FMPUser>, FMPUser>> Users;
        protected Mock<IQueryHandler<IQuery<FMPUserProfile>, IReadOnlyList<FMPUserProfile>>> UsersProfiles;

        [TestInitialize]
        public void TestInitialize()
        {
            Init();
        }

        protected virtual void Init()
        {
            MockRepository = new MockRepository(MockBehavior.Strict);
            GetUserProfile = MockRepository.Create<IQueryHandler<IQuery<FMPUserProfile>, FMPUserProfile>>();
            UserLayouts = MockRepository.Create<IQueryHandler<IQuery<FMPLayout>, IReadOnlyList<FMPLayout>>>();
            UserExists = MockRepository.Create<IQueryHandler<IQuery<FMPUserProfile>, bool>>();
            UserLayoutPreference = MockRepository.Create<IQueryHandler<IQuery<UserLayoutPreference>, UserLayoutPreference>>();
            CreateUserProfile = MockRepository.Create<ICommandHandler<ICreateCommand<FMPUserProfile>>>();
            LayoutForAppAndUser = MockRepository.Create<IQueryHandler<IQuery<FMPLayout>, FMPLayout>>();
            CreateLayout = MockRepository.Create<ICommandHandler<ICreateCommand<FMPLayout>>>();
            UpdateLayout = MockRepository.Create<ICommandHandler<IUpdateCommand<FMPLayout>>>();
            CreateUserLayoutPreference = MockRepository.Create<ICommandHandler<ICreateCommand<UserLayoutPreference>>>();
            UpdateUserLayoutPreference = MockRepository.Create<ICommandHandler<IUpdateCommand<UserLayoutPreference>>>();
            UpdateUserProfile = MockRepository.Create<ICommandHandler<IUpdateCommand<FMPUserProfile>>>();

            Users = MockRepository.Create<IQueryHandler<IQuery<FMPUser>, FMPUser>>();
            UsersProfiles = MockRepository.Create<IQueryHandler<IQuery<FMPUserProfile>, IReadOnlyList<FMPUserProfile>>>();

        }

        protected IUserProfileService CreateUserProfileService()
        {
            return new UserProfileService(null,
                GetUserProfile.Object,
                UserLayouts.Object,
                UserExists.Object,
                UserLayoutPreference.Object,
                CreateUserProfile.Object,
                LayoutForAppAndUser.Object,
                CreateLayout.Object,
                UpdateLayout.Object,
                CreateUserLayoutPreference.Object,
                UpdateUserLayoutPreference.Object,
                UpdateUserProfile.Object,
                Users.Object,
                UsersProfiles.Object);
        }

        protected void InitUserExists(bool exists)
        {
            
            UserExists.Setup(x => x.Handle(It.IsAny<IQuery<FMPUserProfile>>()))
                .Returns(Task.FromResult(exists));
        }

        protected void InitFMPLayouts()
        {
            var layout = new FMPLayout
            {
                ApplicationName = "WorkCenter",
                UserID = "AVerma16",
                LayoutID = 1,
                LayoutName = "My Layout",
                LayoutConfigs = new List<LayoutConfig>
                {
                    new LayoutConfig
                    {
                        LayoutName = "Default",
                        IsDefault = true,
                        disabled = false,
                        ColumnId = 1,
                        ColumnName = "LDAP Alias",
                        IsLocked = false,
                        Sequence = 1,
                        ToolTip = "Are you sure you want to reomve this column?"
                    }
                }
            };

            var layouts = new List<FMPLayout>
            {
                layout
            };
            
            UserLayouts.Setup(x => x.Handle(It.IsAny<IQuery<FMPLayout>>()))
                .Returns(Task.FromResult((IReadOnlyList<FMPLayout>) layouts));
        }

        protected void InitUserPreference()
        {
            var layout = new UserLayoutPreference
            {
                ApplicationName = "WorkCenter",
                UserID = "AVerma16",
           
            };


            UserLayoutPreference.Setup(x => x.Handle(It.IsAny<IQuery<UserLayoutPreference>>()))
                .Returns(Task.FromResult(layout));
        }

        [TestMethod]
        [Ignore] //TODO WIP
        public async Task GetUserProfile2_ExistingUser_ColumnOptionData()
        {
            InitUserExists(true);
            InitFMPLayouts();
            InitUserPreference();

            var service = CreateUserProfileService();
            var result = await service.GetUserProfile("", "");

            result.Should().NotBeNull();
        }

        /// <summary>
        /// GetUserProfile Test method which Returns ColumnOptionData
        /// </summary>
        [TestMethod]
        public async Task GetUserRoleLocation_ReturnsUserProfile()
        {
            //Arrange
            var userProfileService = CreateUserProfileService();
            var lastApplicationName = "WorkCenter";
            var userProfileList = new List<FMPUserProfile>
            {
                new FMPUserProfile
                {
                    UserID = "AVerma16",
                    ActiveLocations = "NGCTLM,ROCTLM",
                    LastApplicationName = "WorkCenter",
                    ProfileID = 1,
                    RoleName = "Global Administrator",
                    RefreshInterval = 1,
                    IsActive = true,
                    SavedPreference = new UserPreference
                    {
                        UnitOfMeasurement = "Imperial"
                    },
                    IsAdmin = false,
                    IsDeveloper = false
                }
            };

            var user = Builder<FMPUser>.CreateNew().Build();
            user.IsAdmin = true;
            user.IsDeveloper = true;

            Users.Setup(x => x.Handle(It.IsAny<IQuery<FMPUser>>())).Returns(Task.FromResult(user));

            UsersProfiles.Setup(s => s.Handle(It.IsAny<IQuery<FMPUserProfile>>()))
                .Returns(Task.FromResult((IReadOnlyList<FMPUserProfile>)userProfileList));

            //Act
            var result = await  userProfileService.GetUserRoleLocation(lastApplicationName);

            //Assert
            result.Should().NotBeNull();
            result.Count.Should().Be(1);
            result.First().Should().NotBeNull();
        }

        /// <summary>
        /// Save User Role Location List
        /// </summary>
        [TestMethod]
        public async Task SaveUserRoleLocationList_ReturnsUserProfile()
        {
            //Arrange
            var userProfileService = CreateUserProfileService();
            var userProfileRequestData = new List<MultipleUserRoleLocationRequestData> {new MultipleUserRoleLocationRequestData
                {
                    activeLocations = "NGCTLM,KOCTLM",
                    roleName = "Global Administrator",
                    userID = "ryadav25"
                } };
            var UserProfileList = new List<FMPUserProfile> {
                new FMPUserProfile{
                    UserID="ryadav25",
                    IsActive=true,
                    LastApplicationName="PlanandSchedule",
                    RoleName = "Viewer",
                    ActiveLocations = "20630,ADATLM,2016,201612",
                }
            };

            CreateUserProfile.Setup(s => s.Handle(It.IsAny<ICreateCommand<FMPUserProfile>>()))
                .Returns(Task.FromResult(true));
            UpdateUserProfile.Setup(s => s.Handle(It.IsAny<IUpdateCommand<FMPUserProfile>>()))
                .Returns(Task.FromResult(true));
            UsersProfiles.Setup(s => s.Handle(It.IsAny<IQuery<FMPUserProfile>>()))
               .Returns(Task.FromResult((IReadOnlyList<FMPUserProfile>)UserProfileList));
            

            //Act
            var result = await userProfileService.SaveUserRoleLocationList(userProfileRequestData);

            //Assert
            result.Should().BeTrue();
        }
    }
}