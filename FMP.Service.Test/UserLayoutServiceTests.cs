#region Header

/// <summary>
/// Schlumberger Private
/// Copyright 2018 Schlumberger.All rights reserved in Schlumberger
/// authored and generated code(including the selection and arrangement of
/// the source code base regardless of the authorship of individual files),
/// but not including any copyright interest(s) owned by a third party
/// related to source code or object code authored or generated by
/// non-Schlumberger personnel.
/// This source code includes Schlumberger confidential and/or proprietary
/// information and may include Schlumberger trade secrets.Any use,
/// disclosure and/or reproduction is prohibited unless authorized in
/// writing.
/// </summary>

#endregion

using System.Threading.Tasks;
using FizzWare.NBuilder;
using FluentAssertions;
using FMP.Service.Layout;
using FMP.Service.Layout.Interface;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using FMPLayout = FMP.Model.LayoutDataModel.Layout;

#pragma warning disable 1591

namespace FMP.Service.Test
{
    [TestClass]
    public class UserLayoutServiceTests
    {
        protected Mock<ICommandHandler<IDeleteCommand<FMPLayout>>> DeleteLayout;
        protected MockRepository MockRepository;

        [TestInitialize]
        public void TestInitialize()
        {
            Init();
        }

        protected virtual void Init()
        {
            MockRepository = new MockRepository(MockBehavior.Strict);
            DeleteLayout = MockRepository.Create<ICommandHandler<IDeleteCommand<FMPLayout>>>();
        }

        protected ILayoutService CreateLayoutService()
        {
            return new LayoutService(
                null,
                null,
                DeleteLayout.Object
            );
        }

        /// <summary>
        ///     GetUserProfile Test method which Returns ColumnOptionData
        /// </summary>
        [TestMethod]
        public async Task GetUserRoleLocation_ReturnsUserProfile()
        {
            //Arrange
            var userLayoutService = CreateLayoutService();

            var user = Builder<FMPLayout>.CreateNew().Build();
            user.LayoutID = 333;
            DeleteLayout.Setup(x => x.Handle(It.IsAny<IDeleteCommand<FMPLayout>>())).ReturnsAsync(true);


            //Act
            var result = await userLayoutService.RemoveLayout(user.LayoutID);

            //Assert
            result.Should().BeTrue();
        }
    }
}