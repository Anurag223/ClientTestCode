/// <summary>
/// Schlumberger Private
/// Copyright 2018 Schlumberger.All rights reserved in Schlumberger
/// authored and generated code(including the selection and arrangement of
/// the source code base regardless of the authorship of individual files),
/// but not including any copyright interest(s) owned by a third party
/// related to source code or object code authored or generated by
/// non-Schlumberger personnel.
/// This source code includes Schlumberger confidential and/or proprietary
/// information and may include Schlumberger trade secrets.Any use,
/// disclosure and/or reproduction is prohibited unless authorized in
/// writing.
/// </summary>

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.OpenApi.Models;
using Swashbuckle.AspNetCore.Filters;
using ILogger = Serilog.ILogger;
using static Serilog.Log;


namespace FMP.Common
{
    /// <summary>
    /// 
    /// </summary>
    public static class StartupExtension
    {

        /// <summary>
        /// 
        /// </summary>
        /// <param name="configuration"></param>
        /// <param name="env"></param>
        /// <returns></returns>
        public static IConfiguration GetConfiguration(IConfiguration configuration, IWebHostEnvironment env)
        {
            var builder = new ConfigurationBuilder()
                .SetBasePath(env.ContentRootPath)
                .AddJsonFile("appsettings.json", true, true)
                .AddJsonFile($"appsettings.{env.EnvironmentName}.json", true)
                .AddEnvironmentVariables();
            return builder.Build();
        }


        public static IServiceCollection EnableSwagger(this IServiceCollection services, 
            IConfiguration configuration,
            string assemblyName)

        {
            var info = new OpenApiInfo
            {
                Title = configuration["Title"], 
                Version = configuration["Version"],
                Description = configuration["Description"]
            };



            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc(info.Version, info);
                var baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
                var commentsFileName = assemblyName + ".xml";
                var commentsFile = Path.Combine(baseDirectory, commentsFileName);
                c.IncludeXmlComments(commentsFile);
                Logger.Debug("using xml comments file: " + commentsFile);
                c.DescribeAllEnumsAsStrings(); // this will do the trick

                c.DocInclusionPredicate((version, apiDescription) =>
                {
                    if (apiDescription.GroupName != null && apiDescription.GroupName.Equals(version))
                    {
                        var values = apiDescription.RelativePath
                            .Split('/')
                            .Select(v => v.Replace("v{version}", version));

                        apiDescription.RelativePath = string.Join("/", values);

                        var versionParameter = apiDescription.ParameterDescriptions
                            .SingleOrDefault(p => p.Name == "version");

                        if (versionParameter != null)
                            apiDescription.ParameterDescriptions.Remove(versionParameter);

                        return true;
                    }

                    return false;
                });

              
                if (!Convert.ToBoolean(configuration["EnableAuthorize"]) == false)
                {
                    string idUrl = configuration["IdentityUrl"];
                    Logger.Information("IdentityServer: " + idUrl);
                    string apiName = configuration["ApiName"];
                    var oAuthKeyScheme = new OpenApiSecurityScheme
                    {
                        Flows = new OpenApiOAuthFlows
                        {
                            AuthorizationCode = new OpenApiOAuthFlow
                            {
                                AuthorizationUrl = new Uri(idUrl + "/connect/authorize"),
                                Scopes = new Dictionary<string, string>
                                {
                                   [apiName] =apiName                                  
                                },

                                TokenUrl = new Uri(idUrl+ "/connect/token")
                            }
                        },
                        In = ParameterLocation.Header,
                        Name = "Authorization",
                        Type = SecuritySchemeType.OAuth2,
                        Description = "OAuth2 authentication"
                    };
                    c.AddSecurityDefinition("oauth2", oAuthKeyScheme);
                    c.OperationFilter<SecurityRequirementsOperationFilter>();
                }




                // Locate the XML file being generated by ASP.NET...
                //var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                //var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

                //Tell Swagger to use those XML comments.
                //c.IncludeXmlComments(GetPath(app, "FMP.API.xml"));
                //c.IncludeXmlComments(GetPath(app, "FMP.Model.xml"));
                // ... Add more here
            });

            //if (!string.IsNullOrWhiteSpace(configuration["XmlDocument"]))
            //{
            //    services.AddSwaggerGen(c =>
            //    {
            //        c.IncludeXmlComments(GetPath(app, configuration["XmlDocument"]));
            //    });
            //}

            return services;
        }

        public static void ConfigureSwagger(IApplicationBuilder app, IConfiguration configuration)
        {
            var routePrefix = configuration["RoutePrefix"];
            app.UseSwagger(c => { c.RouteTemplate = routePrefix + "/swagger/{documentName}/swagger.json"; });

            app.UseSwaggerUI(c =>
            {
                c.RoutePrefix = routePrefix;
                c.SwaggerEndpoint("/" + routePrefix + "/swagger/" + configuration["Version"] + "/swagger.json",
                    configuration["Title"]);
            });
            app.UseMvc();
        }

        private static string GetPath(object app, string value)
        {
            return Path.Combine(app + value);
        }
    }
}