/// <summary>
/// Schlumberger Private
/// Copyright 2018 Schlumberger.All rights reserved in Schlumberger
/// authored and generated code(including the selection and arrangement of
/// the source code base regardless of the authorship of individual files),
/// but not including any copyright interest(s) owned by a third party
/// related to source code or object code authored or generated by
/// non-Schlumberger personnel.
/// This source code includes Schlumberger confidential and/or proprietary
/// information and may include Schlumberger trade secrets.Any use,
/// disclosure and/or reproduction is prohibited unless authorized in
/// writing.
/// </summary>

using System;
using System.Collections.Generic;
using System.Net;
using System.Security.Claims;
using System.Threading.Tasks;
using FMP.API.Infrastructure.Exceptions;
using FMP.Model.Common;
using FMP.Model.LayoutDataModel;
using FMP.Model.UserProfileDataModel;
using FMP.Service.Layout.Interface;
using FMP.Service.UserProfile.Interface;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace FMP.API.Controllers
{
    /// <summary>
    /// Provides profile functions for users in the TLM Utils domain such as saving last application used,
    /// retrieving layouts(custom grid views), etc.
    /// </summary>
    [Authorize]
    [ApiVersion("1.0")]
    [Produces("application/json")]
    [ApiExplorerSettings(GroupName = "v1")]
    public class UserProfileController : Controller
    {
        #region constructor

        public UserProfileController(
            IUserProfileService userProfileService,
            ILayoutService layoutService)
        {
            _userProfileService = userProfileService;
            _layoutService = layoutService;
        }

        #endregion

        /// <summary>
        /// Gets the UserProfile json with layouts and other details specific for the specified application name.
        /// </summary>
        /// <param name="LDAP"></param>
        /// <param name="applicationName"></param>
        /// <returns></returns>
        [ProducesResponseType(typeof(Layout), (int) HttpStatusCode.OK)]
        [ProducesResponseType((int) HttpStatusCode.NotFound)]
        [HttpGet]
        [Route("api/UserProfile/GetUserProfile")]
        public async Task<IActionResult> GetUserProfile(string LDAP, string applicationName)
        {
            try
            {
                var workCenterView = await _userProfileService.GetUserProfile(LDAP, applicationName);
                if (workCenterView != null)
                    return Ok(workCenterView);
                return NotFound();
            }
            catch (Exception ex)
            {
                throw new DomainException(ex.Message, ex);
            }
        }

        [ProducesResponseType(typeof(bool), (int) HttpStatusCode.OK)]
        [ProducesResponseType((int) HttpStatusCode.NotFound)]
        [HttpPost]
        [Route("api/UserProfile/SaveUserProfile")]
        public async Task<IActionResult> SaveUserProfile([FromBody] UserProfileRequestData userProfileRequestData)
        {
            try
            {
                var result = await _userProfileService.SaveUserProfile(userProfileRequestData);
                if (result)
                    return Ok(result);
                return NotFound();
            }
            catch (Exception ex)
            {
                throw new DomainException(ex.Message, ex);
            }
        }


        [ProducesResponseType(typeof(bool), (int) HttpStatusCode.OK)]
        [ProducesResponseType((int) HttpStatusCode.NotFound)]
        [HttpPost]
        [Route("api/UserProfile/SaveLastApplicationName")]
        public async Task<IActionResult> SaveLastApplicationName([FromBody] AppplicationPageRequest request)
        {
            try
            {
                // Reminder on user detail retrieval from token
                //var userID = User.FindFirst(ClaimTypes.Upn)?.Value;
                //var userFirstName = User.FindFirst(ClaimTypes.GivenName)?.Value;
                //var userLastName = User.FindFirst(ClaimTypes.Surname)?.Value;
                
                var result = await _userProfileService.SaveLastApplicationName(request.Ldap, request.ApplicationName);
                if (result)
                    return Ok(result);
                return NotFound();
            }
            catch (Exception ex)
            {
                throw new DomainException(ex.Message, ex);
            }
        }


        [ProducesResponseType(typeof(bool), (int) HttpStatusCode.OK)]
        [ProducesResponseType((int) HttpStatusCode.NotFound)]
        [HttpGet]
        [Route("api/UserProfile/GetLastApplicationName")]
        public async Task<string> GetLastApplicationName(string Ldap)
        {
            try
            {
                var result = await _userProfileService.GetLastApplicationName(Ldap);
                return result;
            }
            catch (Exception ex)
            {
                throw new DomainException(ex.Message, ex);
            }
        }


        [ProducesResponseType(typeof(UserProfile), (int) HttpStatusCode.OK)]
        [ProducesResponseType((int) HttpStatusCode.NotFound)]
        [HttpGet]
        [Route("api/UserProfile/GetUserRoleLocation")]
        public async Task<IActionResult> GetUserRoleLocations(string LDAP)
        {
            try
            {
                var userProfiles = await _userProfileService.GetUserRoleLocation(LDAP);
                return Ok(userProfiles);
            }
            catch (Exception ex)
            {
                throw new DomainException(ex.Message, ex);
            }
        }

        [ProducesResponseType(typeof(bool), (int) HttpStatusCode.OK)]
        [ProducesResponseType((int) HttpStatusCode.NotFound)]
        [HttpPost]
        [Route("api/UserProfile/SaveUserRoleLocation")]
        public async Task<IActionResult> SaveUserRoleLocation(
            [FromBody] UserRoleLocationRequestData userRoleLocationRequestData)
        {
            try
            {
                // Get user detail retrieval from token
                var userIDFromPrinciple = User.FindFirst(ClaimTypes.Upn)?.Value;
                userIDFromPrinciple = userIDFromPrinciple.Split('@')[0];
                userIDFromPrinciple = userIDFromPrinciple.ToLower();
  
 

                // Workaround to insert the FirstName and LastName since the user profile logic is so convoluted.
                // Will neeed to have major refactor later.
                var userIDFromReq = userRoleLocationRequestData.UserID;
                if(userIDFromReq == userIDFromPrinciple)
                {
                    userRoleLocationRequestData.FirstName = User.FindFirst(ClaimTypes.GivenName)?.Value;
                    userRoleLocationRequestData.LastName =  User.FindFirst(ClaimTypes.Surname)?.Value;
                }
                var result = await _userProfileService.SaveUserRoleLocation(userRoleLocationRequestData);
                if (result)
                    return Ok(result);
                return NotFound();
            }
            catch (Exception ex)
            {
                throw new DomainException(ex.Message, ex);
            }
        }


        #region variables

        public string exceptionMessage = string.Empty;
        private readonly IUserProfileService _userProfileService;
        private readonly ILayoutService _layoutService;

        #endregion
    }
}