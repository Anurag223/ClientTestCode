/* Schlumberger Confidential
/* Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
authored and generated code (including the selection and arrangement of
the source code base regardless of the authorship of individual files),
but not including any copyright interest(s) owned by a third party
related to source code or object code authored or generated by
non-Schlumberger personnel.

This source code includes Schlumberger confidential and/or proprietary
information and may include Schlumberger trade secrets. Any use,
disclosure and/or reproduction is prohibited unless authorized in
writing. */

import { Injectable } from '@angular/core';
import { DataService } from 'src/app/base/service/data.service';
import { HttpClient, HttpRequest, HttpParams } from '@angular/common/http';
import { LoggerService } from 'src/app/base/service/logger.service';
import { Observable } from 'rxjs';
import { FMPHelper } from '../../../../Constants/helpers';
import { ODMEquipEventStatus } from './models/progress-model';

@Injectable({
  providedIn: 'root',
})
export class ProgressPanelService extends DataService {
  constructor(private _http: HttpClient, _loggerService: LoggerService) {
    super('', '', _http, _loggerService);
  }

    /**
     * We are checking status directly from Delfi (we wont use this, instead we will use EHC Agent).
     * @memberof ProgressPanelService
     */
    checkUploadJobStatus(jobId: string): Observable<any> {
        const url = FMPHelper.ApplicationSettings.ehcAvatarAPI+'/JobStatus?jobId='+jobId;
        return super.select(null, url);
           
    }
    /**
 * We are checking status directly from EHC Agent (we wont use this, instead we will use EHC Agent).
 * @memberof ProgressPanelService
 */
    checkEHCAgentStatus(correlationID: string): Observable<any> {
        const url = 'https://api.ehc.qa.slb.com/ehc-agent-status/message/' + correlationID;
        return super.select(null, url);
    }

    /**
     * Check for episode creation
     * @param request
     */
    checkForEpisodeCreation(correlationID: string): Observable<any> 
    {
            const url = 'https://api.ehc.qa.slb.com/v2/episodes?filter[tags]=slb-correlation-id:' + correlationID;
            return super.select(null, url);
    }

    /**
    * Check for work order creation
    * @param request
    */
    checkEquipEventStatus(correlationId: string): Observable<ODMEquipEventStatus> {
        const url = FMPHelper.ApplicationSettings.ehcAvatarAPI + '/ODMStatus?correlationId=' + correlationId;
        return super.select(null, url);
    }

    
    processEmotEpisode(
        episodeID: string,
        equipmentWKEID: string,
        correlationID: string): Observable<String> {

        super.WriteDebugLog('EpisodeBrowserService => processEmotEpisode');
        const url = `${FMPHelper.ApplicationSettings.ehcAvatarAPI}/ProcessEmotEpisode/`;

        let params = new HttpParams();
        params = params.set('wkeId', equipmentWKEID);
        params = params.set('episodeId', episodeID);
        params = params.set('correlationId', correlationID);
        return super.createForJson(params, url);
    }


}
