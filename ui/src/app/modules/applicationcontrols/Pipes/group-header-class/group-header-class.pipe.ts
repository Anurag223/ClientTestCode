/* Schlumberger Private
Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
authored and generated code (including the selection and arrangement of
the source code base regardless of the authorship of individual files),
but not including any copyright interest(s) owned by a third party
related to source code or object code authored or generated by
non-Schlumberger personnel.

This source code includes Schlumberger confidential and/or proprietary
information and may include Schlumberger trade secrets. Any use,
disclosure and/or reproduction is prohibited unless authorized in
writing. */
import { Pipe, PipeTransform } from '@angular/core';
import { GridConfigModel } from 'src/app/sharedcomponents/models/sharedmodels';


/**
 * A pure pipe which applies the styles as per the ITDLS.
 * Note: The pure pipe is used only when there are no locked columns.
 *
 * @export
 * @class GroupHeaderClassPurePipe
 * @implements {PipeTransform}
 */
@Pipe({
  name: 'groupHeaderClassPure',
  pure: true
})
export class GroupHeaderClassPurePipe implements PipeTransform {


  /**
   *  Applies the styles on the group headers as per the 
   *
   * @param {*} value
   * @param {GridConfigModel} gridModel
   * @param {string} field
   * @returns {string}
   * @memberof GroupHeaderClassPurePipe
   */
  transform(value: any, gridModel: GridConfigModel, field: string): string {
    let firstField: string;
    let lastField: string;
    if (gridModel.GroupSettings.length > 0) {
      firstField = gridModel.GroupSettings[0].field;
    }
    if (gridModel.GroupSettings.length > 1) {
      lastField = gridModel.GroupSettings[gridModel.GroupSettings.length - 1].field;
    }

    if (field === firstField) {
      $(value).closest('tr').find('td').removeClass('firstGroupCSS lastGroupCss middleGroupCss').addClass('firstGroupCSS');
    } else if (field === lastField) {
      $(value).closest('tr').find('td').removeClass('firstGroupCSS lastGroupCss middleGroupCss').addClass('lastGroupCss');
    } else {
      $(value).closest('tr').find('td').removeClass('firstGroupCSS lastGroupCss middleGroupCss').addClass('middleGroupCss');
    }
    return '';
  }
}


/**
 * An im-pure pipe which applies the styles as per the ITDLS.
 * Note: The impure pipe is used only when there are locked columns.
 *
 * @export
 * @class GroupHeaderClassImPurePipe
 * @implements {PipeTransform}
 */
@Pipe({
  name: 'groupHeaderClassImPure',
  pure: false
})
export class GroupHeaderClassImPurePipe implements PipeTransform {

  transform(value: any, gridModel: GridConfigModel, field: string): string {
    let firstField: string;
    let lastField: string;
    if (gridModel.GroupSettings.length > 0) {
      firstField = gridModel.GroupSettings[0].field;
    }
    if (gridModel.GroupSettings.length > 1) {
      lastField = gridModel.GroupSettings[gridModel.GroupSettings.length - 1].field;
    }

    const gridContentDiv = $('#divActivityMonitorGrid .k-grid-content');
    const rindex = $(value).closest('tr').attr('aria-rowindex');
    if (field === firstField) {
      $(value).closest('tr').find('td').removeClass('firstGroupCSS lastGroupCss middleGroupCss').addClass('firstGroupCSS');
      $(gridContentDiv).find('tr.k-grouping-row[aria-rowindex=' + rindex + ']').find('td')
        .removeClass('firstGroupCSS lastGroupCss middleGroupCss').addClass('firstGroupCSS');
    } else if (field === lastField) {
      $(value).closest('tr').find('td').removeClass('firstGroupCSS lastGroupCss middleGroupCss').addClass('lastGroupCss');
      $(gridContentDiv).find('tr.k-grouping-row[aria-rowindex=' + rindex + ']').find('td')
        .removeClass('firstGroupCSS lastGroupCss middleGroupCss').addClass('lastGroupCss');
    } else {
      $(value).closest('tr').find('td').removeClass('firstGroupCSS lastGroupCss middleGroupCss').addClass('middleGroupCss');
      $(gridContentDiv).find('tr.k-grouping-row[aria-rowindex=' + rindex + ']').find('td')
        .removeClass('firstGroupCSS lastGroupCss middleGroupCss').addClass('middleGroupCss');
    }

    return '';
  }
}
