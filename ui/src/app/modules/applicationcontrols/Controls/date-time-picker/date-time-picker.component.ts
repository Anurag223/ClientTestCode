/* Schlumberger Private
Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
authored and generated code (including the selection and arrangement of
the source code base regardless of the authorship of individual files),
but not including any copyright interest(s) owned by a third party
related to source code or object code authored or generated by
non-Schlumberger personnel.

This source code includes Schlumberger confidential and/or proprietary
information and may include Schlumberger trade secrets. Any use,
disclosure and/or reproduction is prohibited unless authorized in
writing. */
import {
    Component, Input, ViewChild, ViewEncapsulation, HostListener,
    ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, Output, OnChanges, Renderer2
} from '@angular/core';
import { BaseComponent } from 'src/app/base/component/base/base.component';
import * as $ from 'jquery';
import { LoggerService } from 'src/app/base/service/logger.service';
import { EventEmitter } from '@angular/core';


@Component({
    selector: 'app-date-time-picker',
    templateUrl: './date-time-picker.component.html',
    styleUrls: ['./date-time-picker.component.scss'],
    // changeDetection: ChangeDetectionStrategy.OnPush,
    encapsulation: ViewEncapsulation.None,
})
export class GridDateTimeEditComponent extends BaseComponent implements OnChanges {
    @Input() public value: Date;
    @Input() public min: Date;
    @Input() public max: Date;
    @Input() public disabled: boolean;

    @Output() open: EventEmitter<GridDateTimeEditComponent> = new EventEmitter();
    @Output() change: EventEmitter<Date> = new EventEmitter();
    @Output() close: EventEmitter<GridDateTimeEditComponent> = new EventEmitter();

    @ViewChild('popupAnchor', { static: false }) public popupAnchor: ElementRef;
    @ViewChild('filterPopUp', { static: false }) public filterPopUp: ElementRef;
    popupMargin = {
        horizontal: -2,
        vertical: 2
    };

    // public isDisabled: boolean;
    public Date: Date;
    public DateBound: Date;
    showPopUp: boolean;
    keyListener: any;
    clickListener: any;


    public keydown(event: any): void {
        if (event.keyCode === 27) {
            this.CloseHandler();
        }
    }

    public documentClick(event: any): void {
        if (this.showPopUp && !this.contains(event)) {
            this.CloseHandler();
        }
    }

    constructor(private changeDetector: ChangeDetectorRef,
        _loggerService: LoggerService,
        private renderer: Renderer2) {
        super('GridDateTimeEditComponent', _loggerService);
        this.min = this.min;
        this.max = this.max;
    }

    ngOnChanges() {
        this.DateBound = this.value !== undefined ? this.value : null;
        this.changeDetector.detectChanges();
    }

    private OpenHandler(): void {
        if (!this.disabled) {
            this.showPopUp = true;
            this.changeDetector.detectChanges();
            this.open.emit(this);
            this.clickListener = this.renderer.listen('document', 'click', this.documentClick.bind(this));
            this.keyListener = this.renderer.listen('document', 'keydown', this.keydown.bind(this));
        }
    }

    private CloseHandler(): void {
        this.showPopUp = false;
        this.changeDetector.detectChanges();
        this.close.emit(this);
        this.keyListener();
        this.clickListener();
    }

    /**
    * Manually Detaches the angular change detection.
    * @memberof GridDateTimeEditComponent
    */
    // onCDDetach() {
    //     this.changeDetector.detach();
    // }

    /**
     * Manually Re-attaches the angular change detection.
     * @memberof GridDateTimeEditComponent
     */
    // onCDReAttach() {
    //     this.changeDetector.reattach();
    //     this.changeDetector.detectChanges();
    // }

    onValueChange(event): void {
        this.DateBound = event;
        this.changeDetector.detectChanges();
    }

    onDateTimeCellClick() {
        // this.onCDDetach();
        this.Date = this.DateBound ? this.DateBound : null;

        this.showPopUp ? this.CloseHandler() : this.OpenHandler();
        // this.onCDReAttach();
    }

    /**
     * onSet method is called when user Selects the Date/Time on Editing the respective field on AM Grid
     * Editing the respective field via Edit PopUp. It emits the updated value to ActivityMonitor Component.
     * @memberof GridDateTimeEditComponent
     */
    onSet(): void {
        this.WriteDebugLog('GridDateTimeEditComponent -> onDateTimeSetClick');
        this.value = this.DateBound;
        this.change.emit(this.DateBound);
        this.CloseHandler();
    }

    /**
     * * onCancel method is called when user cancels the edit operation while editing the respective field on AM grid via Edit PopUp.
     * @param {*} event
     * @memberof GridDateTimeEditComponent
     */
    public onCancel(): void {
        // event.preventDefault();
        // event.stopPropagation();
        // event
        this.DateBound = this.value;
        this.CloseHandler();
        // this.changeDetector.markForCheck();
    }
    private contains(event: any): boolean {
        return this.popupAnchor.nativeElement.contains(event.target) ||
            (this.filterPopUp ? this.filterPopUp.nativeElement.contains(event.target) : false)
            || this.CheckIsChildOfCalender(event) || this.CheckIsChildOfTimePicker(event);
    }

    private CheckIsChildOfCalender(event: any): boolean {
        return $(event.target).parents('div.k-calendar-container').length > 0 || event.srcElement.className === 'k-link';
    }

    private CheckIsChildOfTimePicker(event: any): boolean {
        return $(event.target).parents('.k-timeselector').length > 0 || event.srcElement.className === 'k-link';
    }
}

