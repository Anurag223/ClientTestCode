/* Schlumberger Private
Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
authored and generated code (including the selection and arrangement of
the source code base regardless of the authorship of individual files),
but not including any copyright interest(s) owned by a third party
related to source code or object code authored or generated by
non-Schlumberger personnel.

This source code includes Schlumberger confidential and/or proprietary
information and may include Schlumberger trade secrets. Any use,
disclosure and/or reproduction is prohibited unless authorized in
writing. */
import { Component, OnInit, NgZone, Renderer2 } from '@angular/core';
import { FMPHelper } from 'src/Constants/helpers';
import { BaseComponent } from 'src/app/base/component/base/base.component';
import { LoggerService } from 'src/app/base/service/logger.service';

@Component({
  selector: 'app-fmp-userinactive',
  template: ''
})

export class UserinactiveComponent extends BaseComponent implements OnInit {
  //#region Local variable
  public currentLoginTime: number = Date.now();
  public MINUTES_UNITL_AUTO_LOGOUT = 60; // in mins
  public CHECK_INTERVAL = 1; // in mins
  public isTimeout = false;
  listener;

  constructor(_logger: LoggerService,
    private angularZone: NgZone, private renderer: Renderer2) {
    super('UserinactiveCoponent', _logger);
    this.angularZone.runOutsideAngular(() => this.initInterval());
  }

  ngOnInit() {
    this.listener = this.renderer.listen('document', 'wheel', this.resetTimer.bind(this));
    this.listener = this.renderer.listen('document', 'click', this.resetTimer.bind(this));
    this.listener = this.renderer.listen('document', 'keypress', this.resetTimer.bind(this));
    this.listener = this.renderer.listen('document', 'mousewheel', this.resetTimer.bind(this));
    this.listener = this.renderer.listen('document', 'mouseover', this.resetTimer.bind(this));
    this.listener = this.renderer.listen('document', 'mouseout', this.resetTimer.bind(this));
    this.listener();
  }

  /**
   *This method is used to click and scroll up, down events
   * @memberof UserinactiveComponent
   */
  resetTimer() {
    this.currentLoginTime = Date.now();
  }

  /**
   *This methd is used to set interval for check every 1 mint.
   * @memberof UserinactiveComponent
   */
  initInterval() {
    setInterval(() => {
      this.check();
    }, this.CHECK_INTERVAL);
  }

  /**
   *This method is used for check time left for login and current time
   *When timeleft is less than zero then page redirect will logout from app
   * @memberof UserinactiveComponent
   */
  check() {
    const now = Date.now();
    const timeleft: number = Number(this.currentLoginTime) + this.MINUTES_UNITL_AUTO_LOGOUT * 60 * 1000;
    const diff = timeleft - now;
    this.isTimeout = diff < 0;

    if (this.isTimeout) {
      this.angularZone.run(() => this.RouterInstance.navigate([FMPHelper.Routes.Logout.path]));
    }
  }
}
