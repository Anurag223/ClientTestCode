/* Schlumberger Private
Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
authored and generated code (including the selection and arrangement of
the source code base regardless of the authorship of individual files),
but not including any copyright interest(s) owned by a third party
related to source code or object code authored or generated by
non-Schlumberger personnel.

This source code includes Schlumberger confidential and/or proprietary
information and may include Schlumberger trade secrets. Any use,
disclosure and/or reproduction is prohibited unless authorized in
writing. */
import { async, ComponentFixture, TestBed } from '@angular/core/testing';
import { ApplicationcommentsComponent } from './applicationcomments.component';
import { CustomComment, CustomSendMessageEvent } from './applicationcomments.model';
import { ChatModule } from '@progress/kendo-angular-conversational-ui';
import { UserprofileService } from 'src/app/base/userprofile/userprofile.service';
import { HttpModule } from '@angular/http';
import { InputsModule } from '@progress/kendo-angular-inputs';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule } from '@angular/common/http';
import { NgModule, Component, Input, Pipe, PipeTransform, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, Directive } from '@angular/core';
import {
  UserProfileDataModel, Role, IRole, IProfile, IUserProfile,
  UserProfileViewModel, UserProfile, Profile
} from 'src/app/base/models/userprofile';

const customComment: CustomComment = {
  parentId: 3,
  id: 10,
  author: {
    id: 100,
    name: 'test',
    avatarUrl: 'test@test.com'
  },
  parentMessage: ''
};

const customSendMessageEvent: CustomSendMessageEvent = {
  message: customComment
};

const profileMockObj: IProfile = {
  profileId: '123',
  competencyProfile: 'wfasdf',
  embargoLocationFlag: false,
  labourHours: '12',
  organization: 'asdfasdf',
  segment: 'asdf',
  workLocation: 'Russia',
  // workLocationName: string;
  siteName: 'asdf'
};

const profileMock: Array<IProfile> = [{
  profileId: '11',
  competencyProfile: '',
  embargoLocationFlag: false,
  labourHours: '45',
  organization: 'abc',
  segment: '',
  workLocation: '',
  siteName: '',
}];

const userProfileMock: /*IUserProfile */any = {
  firstName: 'abc',
  lastName: 'xyz',
  ldapAlias: 'ad',
  email: 'ad@gd.com',
  ginNumber: '1234',
  active: true,
  activeCMMS: 'asd',
  selectedUserRole: new Role(
    {
      name: '',
      description: '',
      profile: profileMock,
      link: {
        href: 'www.google.com',
        rel: 'asdf',
        type: 'sdf',
      },
    }
  ), // role,
  role: [{
    name: '',
    description: '',
    profile: profileMock,
    link: {
      href: 'www.google.com',
      rel: 'asdf',
      type: 'sdf',
    },
  }]// IRole[];
};



const userProfileDataModelMock: UserProfileDataModel = new UserProfileDataModel();
userProfileDataModelMock.user = new UserProfile(userProfileMock);
userProfileDataModelMock.user.role = [new Role({
  name: '',
  description: '',
  profile: profileMock,
  link: {
    href: 'www.google.com',
    rel: 'asdf',
    type: 'sdf',
  },
})];

class UserprofileServiceMock {

  public dataModel: UserProfileDataModel = new UserProfileDataModel();
  public userProfileMock: /*IUserProfile */any = {
    firstName: '',
    lastName: '',
    ldapAlias: '',
    email: '',
    ginNumber: '',
    active: true,
    activeCMMS: '',
    selectedUserRole: new Role(
      {
        name: '',
        description: '',
        profile: [{
          embargoLocationFlag: false,
          labourHours: '',
          organization: 'axecenture',
          segment: 'xyz',
          workLocation: 'pune',
        }], // IProfile[];
        link: {
          href: '',
          rel: '',
          type: '',
        }, // ILink;
      }
    ),
    role: [{
      name: '',
      description: '',
      profile: [{
        embargoLocationFlag: false,
        labourHours: '',
        organization: 'axecenture',
        segment: 'xyz',
        workLocation: 'pune',
      }], // IProfile[];
      link: {
        href: '',
        rel: '',
        type: '',
      }, // ILink;
    }], // IRole[];
  };
  constructor() {
    this.dataModel.user = new UserProfile(this.userProfileMock);
  }
}

// userProfileDataModelMock.user.seletedRole = new Role(role);

userProfileDataModelMock.user.seletedRole.seletedWorkLocations.push(new Profile(profileMockObj));


const userProfileViewModelMock: UserProfileViewModel = new UserProfileViewModel(userProfileDataModelMock);

xdescribe('ApplicationcommentsComponent', () => {
  let component: ApplicationcommentsComponent;
  let fixture: ComponentFixture<ApplicationcommentsComponent>;


  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ApplicationcommentsComponent],
      imports: [
        ChatModule,
        HttpModule,
        HttpClientModule,
        BrowserModule,
        InputsModule
      ],
      providers: [
        { provide: UserprofileService, useClass: UserprofileServiceMock },
      ]
    })
      .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(ApplicationcommentsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should execuet replyClick', () => {
    component.userProfileViewModel = userProfileViewModelMock;
    component.replyClick(customComment);
  });

  it('should execuet cancelClick', () => {
    component.parentId = 0;
    component.cancelClick();
  });

  it('should execuet onReplyMessageClick', () => {
    component.parentId = 0;
    component.onReplyMessageClick(this.parentId);
  });

});
