/* Schlumberger Private
Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
authored and generated code (including the selection and arrangement of
the source code base regardless of the authorship of individual files),
but not including any copyright interest(s) owned by a third party
related to source code or object code authored or generated by
non-Schlumberger personnel.

This source code includes Schlumberger confidential and/or proprietary
information and may include Schlumberger trade secrets. Any use,
disclosure and/or reproduction is prohibited unless authorized in
writing. */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable ,  Subject } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { DataService } from 'src/app/base/service/data.service';
import { MateoApiServiceHandle } from 'src/app/base/service/mateo-api-service-handle.service';

import { Site } from '../models/siteDetails';
import { LoggerService } from 'src/app/base/service/logger.service';
import { MateoQueue, MateoQueueStatus } from 'src/app/base/models/mateoQueue';
import { ApplicationException } from '../error/exception';
import { FMPHelper } from '../../../Constants/helpers';

@Injectable()
export class SiteDetailsService extends DataService {
  public siteApiObservable = new Subject<Site>();
  public siteErrorObservable = new Subject<ApplicationException>();
  public sitesApiObservable = new Subject<any>();
  public sitesErrorObservable = new Subject<ApplicationException>();
  public site: Site;

  constructor(
    private _http: HttpClient,
    private mateoHandle: MateoApiServiceHandle,
    public _loggerService: LoggerService,
  ) {
    super('SiteDetailsService', '', _http, _loggerService);
  }

  getSiteDetailsFromMateo(siteCode: string) {
    const url =
      FMPHelper.ApplicationSettings.mateoSiteAPI +
      '?siteCode=' +
      encodeURIComponent(siteCode);
    const mateoQueue: MateoQueue<Site> = new MateoQueue<Site>(url);
    mateoQueue.callbackSubject = this.siteApiObservable;
    mateoQueue.errorCallbackSubject = this.siteErrorObservable;
    mateoQueue.processStatusFnRef = this.HandelSitePollingStatus;
    this.mateoHandle.HandleMateoGet(mateoQueue);
  }
  getAllSites(productline: string = ' ') {
        const url =
            FMPHelper.ApplicationSettings.mateoSiteAPI +
            '?productLine=' +
            encodeURIComponent(productline);
        const mateoQueue: MateoQueue<Site> = new MateoQueue<Site>(url);
        mateoQueue.callbackSubject = this.sitesApiObservable;
        mateoQueue.errorCallbackSubject = this.sitesErrorObservable;
        mateoQueue.processStatusFnRef = this.HandelSitePollingStatus;
        this.mateoHandle.HandleMateoGet(mateoQueue);
  }
  HandelSitePollingStatus(queue: MateoQueue<any>, body: any) {
    if (body && body.userStatus) {
      if (body.userStatus === 3 || body.userStatus === 4) {
        queue.status = MateoQueueStatus.FAILED;
      }
    }
  }
}
