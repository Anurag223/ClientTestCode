/* Schlumberger Private
Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
authored and generated code (including the selection and arrangement of
the source code base regardless of the authorship of individual files),
but not including any copyright interest(s) owned by a third party
related to source code or object code authored or generated by
non-Schlumberger personnel.

This source code includes Schlumberger confidential and/or proprietary
information and may include Schlumberger trade secrets. Any use,
disclosure and/or reproduction is prohibited unless authorized in
writing. */
import { Component, OnInit, OnDestroy, ChangeDetectionStrategy, ApplicationRef, ChangeDetectorRef, AfterViewInit } from '@angular/core';
import { UserprofileService } from './userprofile.service';
import { UserRoleSiteDataModel, UserProfileViewModel, Role, Profile, IRole } from '../models/userprofile';
import * as $ from 'jquery';
import { HttpErrorResponse } from '@angular//common/http';
import * as LO from 'lodash';
import { Subscription } from 'rxjs';
import { SharedService } from 'src/app/sharedcomponents/shared.service';
import { Router, ActivatedRoute } from '@angular/router';
import { BaseComponent } from '../component/base/base.component';
import { LoggerService } from 'src/app/base/service/logger.service';


@Component({
    selector: 'user-profile-header',
    templateUrl: './userprofile.component.html',
    styleUrls: ['./userprofile.component.scss'],
    changeDetection: ChangeDetectionStrategy.OnPush
})

export class UserProfileComponent extends BaseComponent implements OnInit, OnDestroy {
    toggleNav = true;
    errorMessage: string;
    isVisible = false;
    userProfileSubcription: Subscription;
    public viewModel: UserProfileViewModel;

    constructor(private router: Router,
        private _userProfileservice: UserprofileService,
        private sharedService: SharedService,
        _loggerService: LoggerService,
        private changeDetector: ChangeDetectorRef
    ) {
        super('UserProfileComponent', _loggerService);
        this.viewModel = new UserProfileViewModel(this._userProfileservice.dataModel);
    }

    /**
     * We set the subscription to USerProfile, as we get data from database we bind the details to corresponding dropdown
     *
     * @memberof UserProfileComponent
     */
    ngOnInit() {
        this.sharedService.userLdap= this.viewModel.data.LDAP;

        this.userProfileSubcription = this._userProfileservice.userRoleObservable.subscribe(role => {
            this.setUpRoleBound(role);
        });

        if (this.viewModel && this.viewModel.data && this.viewModel.data.user &&
            this.viewModel.data.user.seletedRole) {
            this.setUpRoleBound(this.viewModel.data.user.seletedRole);
            this.viewModel.data.user.selectedUserRole = this.viewModel.data.user.seletedRole;
        }
    }

    /**
     * setUpRoleBound method is used to set the Role and Transaction sites selected for current user
     *
     * @private
     * @param {Role} role
     * @memberof UserProfileComponent
     */
    private setUpRoleBound(role: Role): void {
        this.viewModel.roleBound = new Role(role);
        this.viewModel.roleBound.fmpRoleName = role.fmpRoleName;
        this.viewModel.roleBound.assignedClaims = role.getAssignedClaims;
        if (this.viewModel.roleBound.profile && this.viewModel.roleBound.profile.length > 0) {
            this.viewModel.roleBound.profile.forEach(p => {
                const data = role.profile.find(ip => ip.workLocation === p.workLocation);
                p.isSelected = data ? data.isSelected : false;
                p.isSelectedModified = p.isSelected;
            });
        }
    }

    /**
     * applyTransactionsSites method trigerred on Apply button after selcting Transaction Sites
     *
     * @param {*} UserProfilepop
     * @memberof UserProfileComponent
     */
    public applyTransactionsSites(UserProfilepop): void {
        UserProfilepop.hide();
        if (!LO.some<Profile>(this.viewModel.roleBound.profile, p => p.isSelectedModified)) {
            alert('You should select at least one transaction site.');
        } else {
            const foundRole = LO.find<Role>(this.viewModel.data.user.role, r => r.fmpRoleName === this.viewModel.roleBound.fmpRoleName);

            if (foundRole) {
                foundRole.profile.forEach(p => {
                    p.isSelected = this.viewModel.roleBound.profile.find(ip => ip.workLocation === p.workLocation).isSelectedModified;
                });
                this.isVisible = false;
                this.saveUserPreferences();
                foundRole.isInitLoad = false;
                this._userProfileservice.setCacheOn(true);
                // Emit change to other component for data refresh
                this._userProfileservice.triggerSiteUpdate(foundRole);
                this._userProfileservice.setCacheOn(false);

            }
        }
    }

    /**
     * saveUserPreferences method is used to save the user selected Work Locations and Auto Refresh interval
     * It saves the details into Mongo Db
     * @memberof UserProfileComponent
     */
    saveUserPreferences(): void {
        this._userProfileservice.saveUserRoleSiteMapping(this.viewModel.data.user).subscribe((userProfileData: UserRoleSiteDataModel) => {
            this.WriteDebugLog('User Profile Data saved', new Map().set('Data', userProfileData));
        }, (err: HttpErrorResponse) => {
            if (err.error instanceof Error) {
                // A client-side or network error occurred.
                this.WriteErrorLog('An error occurred while saving role/site. 1', err);
            } else {
                // Backend returns unsuccessful response codes such as 404, 500 etc.
                this.WriteErrorLog('An error occurred while saving role/site. 2', err);
            }
        });
    }

    /**
     * Method triggered when user changes the Role selection
     *
     * @param {Role} selectedRole
     * @param {*} roleProfilepop
     * @memberof UserProfileComponent
     */
    RoleSelectionChanged(selectedRole: Role, roleProfilepop) {
        roleProfilepop.hide();
        this.viewModel.data.user.selectRole(selectedRole);
        // Save the selected preferences
        this.saveUserPreferences();
        selectedRole.isInitLoad = false;
        // Emit change to other component for data refresh
        this._userProfileservice.triggerSiteUpdate(selectedRole);
    }
    /**
     * roleSelected rebinds the current selections for User Role
     *
     * @param {Role} selectedRole
     * @memberof UserProfileComponent
     */
    roleSelected(selectedRole: Role) {
        this.viewModel.data.user.selectedUserRole = selectedRole;
    }

    /**
     * openSitePopover is used to open the Transaction Site popover
     * We also reset the isSelectedModified property from the actual value retrieved from Database
     * @param {*} UserProfilepop
     * @memberof UserProfileComponent
     */
    openSitePopover(UserProfilepop) {
        this.viewModel.roleBound.profile.forEach(p => {
            p.isSelectedModified = this.viewModel.roleBound.profile.find(ip => ip.workLocation === p.workLocation).isSelected;
        });
        UserProfilepop.show();
    }

    ngOnDestroy() {
        if (this.userProfileSubcription) {
            // unsubscribe to the User profile subscription so that it gets propogated to other subscriptions
            this.userProfileSubcription.unsubscribe();
        }
    }
}
