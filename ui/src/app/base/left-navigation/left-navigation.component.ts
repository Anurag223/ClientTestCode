/* Schlumberger Private
Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
authored and generated code (including the selection and arrangement of
the source code base regardless of the authorship of individual files),
but not including any copyright interest(s) owned by a third party
related to source code or object code authored or generated by
non-Schlumberger personnel.

This source code includes Schlumberger confidential and/or proprietary
information and may include Schlumberger trade secrets. Any use,
disclosure and/or reproduction is prohibited unless authorized in
writing. */
import { Component, OnInit, OnDestroy } from '@angular/core';
import { FMPConstant } from '../../../Constants/constant';
import { UserprofileService } from '../userprofile/userprofile.service';
import { UserProfileViewModel } from '../../base/models/userprofile';
import { BaseComponent } from '../../base/component/base/base.component';
import { LoggerService } from '../../base/service/logger.service';
import { FMPHelper } from '../../../Constants/helpers';
import { AppTranslateService } from '../../../app/app.translate.service';
import { OidcSecurityService } from 'angular-auth-oidc-client';
import { Subscription } from 'rxjs';
import { Router } from '@angular/router';

@Component({
    selector: 'app-left-navigation',
    templateUrl: './left-navigation.component.html',
    styleUrls: ['./left-navigation.component.scss'],
})
export class LeftNavigationComponent extends BaseComponent implements OnInit, OnDestroy {
    navItems: INavigationItem[];
    public viewModel: UserProfileViewModel;
    public showAllNavLinks = true;
    userDataSubscription: Subscription;
    isHistorianAdmin: boolean = false;
    isSkyreachMember: boolean = false;
    isMateoMember:boolean= false;
    HISTORIANKEY: string = "a69e672a-a8a0-4711-8ee9-b11023e04da4";
    SKYREACHGROUPKEY: string = "9781ba51-6e26-4265-8953-e2c746798dcd";
    MATEOGROUPKEY: string= "4600ccd9-3c58-4c02-a2d0-60c37944483e"

    constructor(
        private userProfileservice: UserprofileService,
        private oidcSecurityService: OidcSecurityService,
        private router: Router,
        loggerService: LoggerService) {
        super('LeftNavigationComponent', loggerService);
        
        this.WriteDebugLog('LeftNavigationComponent => constructor');
        this.viewModel = new UserProfileViewModel(
            this.userProfileservice.dataModel,
        );
        
    }
    ngOnDestroy() {
        this.UnsubscribeObervable(this.userDataSubscription);
    }
    ngOnInit() {
        this.WriteDebugLog('LeftNavigationComponent => ngOnInit');
        this.createUserAuthSubscription();
        
    }

    setAccessFlagsBasedOnLdapGroups(userAuthInfo){
        let groups: any[] = userAuthInfo.groups;
        if(groups!=null){
        this.isHistorianAdmin = groups.includes(this.HISTORIANKEY)? true: false;      
        this.isSkyreachMember= groups.includes(this.SKYREACHGROUPKEY)? true: false;  
        this.isMateoMember= groups.includes(this.MATEOGROUPKEY)? true: false;
        }
    }
    private handleServiceError(message: string, error: any) {
        this.WriteErrorLog(message, error);
        this.router.navigate([FMPHelper.Routes.FMPError.path]);
    }
    createUserAuthSubscription()
    {
            this.userDataSubscription = this.oidcSecurityService
                .getUserData()
                .subscribe(
                    (userAuthInfo: any) => {
                        if (userAuthInfo != null && userAuthInfo.nbf !=null) {                                                   
                            this.setAccessFlagsBasedOnLdapGroups(userAuthInfo);
                            this.loadNavItems();
                        }
                    },
                    err => {
                        this.handleServiceError(
                            'Error in fetching User Details from Identity Server:',
                            err,
                        );
                    },
                );
     }
    
    /**
     * loadNavItems method is used to show the Navigation menu items
     * In this method for MVP1 we are enabling Dashboard, Planning and Scheduling and WorkCenter pages only on Dev and local environments
     *
     */
    public loadNavItems(): void {

        this.navItems = [];
        // implement feature flags
        for (let menuItem of AllMenuItems) {
            if (FMPHelper.ApplicationSettings.includedFeatures.includes(menuItem.appName)) {
                // quick check for historian admin
                if (menuItem.appName.includes(FMPConstant.historianProvision)) {
                    if (this.isHistorianAdmin)
                        this.navItems.push(menuItem);
                }
                else if (menuItem.appName.includes(FMPConstant.historianManagement) ||
                    menuItem.appName.includes(FMPConstant.conflictManagement) ||
                    menuItem.appName.includes(FMPConstant.channelDefinition) ||
                    menuItem.appName.includes(FMPConstant.auditLog)||
                    menuItem.appName.includes(FMPConstant.channelDefinitionAdmin)
                ) {
                    if (this.isSkyreachMember)
                        this.navItems.push(menuItem);
                }
                else if(menuItem.appName.includes(FMPConstant.schedulerAdmin)){
                    if (this.isMateoMember){
                        this.navItems.push(menuItem);
                    }                   
                }
                else {
                    this.navItems.push(menuItem);
                }
            }
        }
    }

    /**
     * onAppNameClick method is used to save the currently visited App name into Mongo Db
     * against the current user. When the user loads the application again it gets this details
     * and redirects to last visited page
     *
     * @param appName appName
     */
    onAppNameClick(appName) {

        this.WriteDebugLog('LeftNavigationComponent => onAppNameClick');

        // Save AppName here
        if (appName) {
            this.userProfileservice
                .saveLastApplicationName(this.viewModel.data.user.ldapAlias, appName)
                .subscribe(
                    result => { },
                    err => this.WriteErrorLog('Saving Last Application Failed for appName ' + appName, err),
                );
        }
    }
}
    
export class INavigationItem {
  appName: string;
  label: string;
  icon: string;
  url: string;
}

const AllMenuItems: INavigationItem[] = [
 /** {
    appName: FMPConstant.dashboard,
    label: 'Dashboard',
    icon: 'dash',
    url: FMPHelper.Routes.Dashboard.path,
  },

  {
    appName: FMPConstant.planandSchedule,
    label: 'HOME.INVENTORY',
    icon: 'inventory',
    url: FMPHelper.Routes.PlanningAndScheduling.path,
  },
  {
    appName: FMPConstant.activityMonitor,
    label: 'HOME.ACTIVITYMONITOR',
    icon: 'activitymonitor',
    url: FMPHelper.Routes.ActivityMonitor.path,
  },
  {
    appName: FMPConstant.workCenter,
    label: 'HOME.WORKCENTER',
    icon: 'workcenter',
    url: FMPHelper.Routes.WorkCenter.path,
  },
  {
    appName: FMPConstant.administration,
    label: 'HOME.USER_ROLES',
    icon: 'administration',
    url: FMPHelper.Routes.Administration.path,
  },**/
   
    {
        appName: FMPConstant.epicv3Browser,
        label: 'Epic v3 Browser',
        icon: 'epicbrowser',
        url: FMPHelper.Routes.EpicV3Browser.path,
    },
    {
        appName: FMPConstant.historianProvision,
        label: 'Historian Provisioning',
        icon: 'historianprovision',
        url: FMPHelper.Routes.HistorianProvision.path,
    },
    //{
    //    appName: FMPConstant.tlmUtils,
    //    label: 'Data Mapping Admin',
    //    icon: 'datamapper',
    //    url: FMPHelper.Routes.DataMappingUtils.path,
    //},
    {
        appName: FMPConstant.equipmentHealth,
        label: 'Equipment Health Demo',
        icon: 'equipmenthealth',
        url: FMPHelper.Routes.EquipmentHealth.path,
    },
    //{
    //    appName: FMPConstant.classificationEditor,
    //    label: 'Class System Editor',
    //    icon: 'classeditor',
    //    url: FMPHelper.Routes.ClassificationEditor.path,
    //},
    {
        appName: FMPConstant.standardWork,
        label: 'Standard Work Utils',
        icon: 'standardwork',
        url: FMPHelper.Routes.StandardWork.path,
    },
    {
        appName: FMPConstant.episodeBrowser,
        label: 'Episode Browser',
        icon: 'episodebrowser',
        url: FMPHelper.Routes.EpisodeBrowser.path,
    },
    {
        appName: FMPConstant.schedulerAdmin,
        label: 'Scheduler Admin',
        icon: 'workcenter',
        url: FMPHelper.Routes.SchedulerAdmin.path,
    },
    {
        appName: FMPConstant.historianManagement,
        label: 'Manage HistorianDB',
        icon: 'classeditor',
        url: FMPHelper.Routes.HistorianManagement.path,
    },
    {
        appName: FMPConstant.conflictManagement,
        label: 'DB Maps Conflicts',
        icon: 'conflictdashboard',
        url: FMPHelper.Routes.ConflictManagement.path,
    },
    {
        appName: FMPConstant.auditLog,
        label: 'Audit Logs',
        icon: 'auditlogdashboard',
        url: FMPHelper.Routes.AuditLog.path,
    },
    {
        appName: FMPConstant.channelDefinition,
        label: 'Manage Channel Definitions',
        icon: 'channelDefinitionBoard',
        url: FMPHelper.Routes.ChannelDefinition.path,
    },
    {
        appName: FMPConstant.channelDefinitionAdmin,
        label: 'Bulk Import Channels',
        icon: 'channelAdminBoard',
        url: FMPHelper.Routes.ChannelDefinitionAdmin.path,
    }
];
