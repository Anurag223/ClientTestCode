/* Schlumberger Private
Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
authored and generated code (including the selection and arrangement of
the source code base regardless of the authorship of individual files),
but not including any copyright interest(s) owned by a third party
related to source code or object code authored or generated by
non-Schlumberger personnel.

This source code includes Schlumberger confidential and/or proprietary
information and may include Schlumberger trade secrets. Any use,
disclosure and/or reproduction is prohibited unless authorized in
writing. */
import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';
import { BaseComponent } from 'src/app/base/component/base/base.component';
import { LoggerService } from 'src/app/base/service/logger.service';
import { FMPHelper } from '../../../Constants/helpers';
import { INameValueString, LogLevel } from 'src/Constants/application';
import { AuthStorageKeys } from '../helpers/AuthenticationHelper';
import { ColumnOptionsService } from 'src/app/sharedcomponents/columnOptions/columnoptions.service';

@Component({
  selector: 'release-notes',
  templateUrl: './release-notes.component.html',
  styleUrls: ['./release-notes.component.scss']
})
export class ReleaseNotesComponent extends BaseComponent implements OnInit {

  constructor(_loggerService: LoggerService, private _columnOptionsService: ColumnOptionsService) {
    super('ReleaseNotesComponent', _loggerService);
  }

  get AuthToken(): string {
    const token: string = FMPHelper.ReadFromLocalStorage(AuthStorageKeys.FMP_AUTH_AUTHORIZATIONDATA);
    return token && !FMPHelper.StringIsNullOrWhiteSpace(token) ? `Bearer ${token}` : '';
  }

  MateoAPIUrl: string;
  FMPAPIUrl: string;
  EnvironmentURLsSettings: INameValueString[] = [];
  EnvironmentSettings: INameValueString[] = [];
  AuthenticationSettings: INameValueString[] = [];

  ngOnInit() {
    this.MateoAPIUrl = FMPHelper.ApplicationSettings.baseSettings.mateoBaseUrl;
    this.FMPAPIUrl = FMPHelper.ApplicationSettings.baseSettings.fmpBaseUrl;

    for (const key of Object.keys(FMPHelper.ApplicationSettings)) {
      if (key !== 'baseSettings') {
        this.EnvironmentURLsSettings.push(...[{ name: key, value: FMPHelper.ApplicationSettings[key] }]);
      }
    }

    for (const key of Object.keys(FMPHelper.ApplicationSettings.baseSettings)) {
      this.EnvironmentSettings.push(...[{ name: key, value: FMPHelper.ApplicationSettings.baseSettings[key] }]);
    }
    const logLevelEntry = this.EnvironmentSettings.find(es => FMPHelper.StringEqual(es.name, 'logLevel'));
    logLevelEntry.value = this.CurrentLogLevelString;


    for (const key of Object.keys(FMPHelper.AuthenticationSettings)) {
      this.AuthenticationSettings.push(...[{ name: key, value: FMPHelper.AuthenticationSettings[key] }]);
    }
  }

  triggerDbLayoutUpdate(): void {
    this._columnOptionsService.updateDbLayoutMappings()
      .subscribe(res => {
        if (res) {
          this.ToasterServiceInstace.ShowSuccess('Layouts updated');
        } else {
          this.ToasterServiceInstace.ShowError('Layouts update failed.');
        }
      }, err => {
        this.WriteErrorLog('Layout update error.', err);
        this.ToasterServiceInstace.ShowError('Layout update error.');
      });
  }
}
