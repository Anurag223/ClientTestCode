
import {forkJoin as observableForkJoin,  Observable } from 'rxjs';
/* Schlumberger Private
Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
authored and generated code (including the selection and arrangement of
the source code base regardless of the authorship of individual files),
but not including any copyright interest(s) owned by a third party
related to source code or object code authored or generated by
non-Schlumberger personnel.

This source code includes Schlumberger confidential and/or proprietary
information and may include Schlumberger trade secrets. Any use,
disclosure and/or reproduction is prohibited unless authorized in
writing. */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { DataService } from 'src/app/base/service/data.service';

import { FMPHelper } from '../../../Constants/helpers';
import { ICMMSRole, IFMPRole, IClaim, RoleDataModel } from '../models/role';
import { LoggerService } from './logger.service';


@Injectable()

export class ApplicationSecurityService extends DataService {
    public dataModel: RoleDataModel;

    constructor(private _http: HttpClient, public _loggerService: LoggerService) {
        super('ApplicationSecurityService', '', _http, _loggerService);
        this.dataModel = new RoleDataModel();
    }

    getRoles(): Observable<IFMPRole[]> {
        const url = FMPHelper.ApplicationSettings.roleAPI + '/true';
        return this.selectall<IFMPRole[]>(url);
    }

    getCMMSRoles(): Observable<ICMMSRole[]> {
        const url = FMPHelper.ApplicationSettings.cmmsRoleAPI;
        return this.selectall<ICMMSRole[]>(url);
    }

    getClaims(): Observable<IClaim[]> {
        const url = FMPHelper.ApplicationSettings.claimAPI;
        return this.selectall<IClaim[]>(url);
    }
    public getCMMSFMPRoleMapping(): Observable<any[]> {
        const roles = this.getRoles();
        const cmmsRoles = this.getCMMSRoles();
        const claims = this.getClaims();
        return observableForkJoin([roles, cmmsRoles, claims]);
    }

}
