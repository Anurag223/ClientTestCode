/* Schlumberger Private
Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
authored and generated code (including the selection and arrangement of
the source code base regardless of the authorship of individual files),
but not including any copyright interest(s) owned by a third party
related to source code or object code authored or generated by
non-Schlumberger personnel.

This source code includes Schlumberger confidential and/or proprietary
information and may include Schlumberger trade secrets. Any use,
disclosure and/or reproduction is prohibited unless authorized in
writing. */
import { HttpRequest, HttpResponse } from '@angular/common/http';
import { Subject } from 'rxjs';
import { ApplicationException } from '../error/exception';

export class MateoQueue<T> {
    constructor(_apiurl: string) {
        this.apiurl = _apiurl;
        this.retryCount = 1;
        this.status = MateoQueueStatus.INITIALIZED;
        this.requestType = MateoQueueType.GET;
    }

    requestType: MateoQueueType;
    request: HttpRequest<any>;
    response: HttpResponse<any>;
    pollingurl: string;
    apiurl: string;
    status: MateoQueueStatus;
    needCache: boolean;
    callbackSubject: Subject<T>;
    retryCount: number;
    errorCallbackSubject: Subject<ApplicationException>;
    groupSubject: Subject<T>;
    processStatusFnRef: (queue: MateoQueue<T>, statusBody: any) => void;

    //#region Getter/Setter Properties
    validationMessages: string[];
    get isValid(): boolean {
        let validity = true;
        const messages: string[] = [];
        if (!(this.apiurl && this.apiurl.length > 0)) {
            messages.push('API url not set.');
        }

        if (!this.callbackSubject) {
            messages.push('Callback subject not set.');
        }

        if (!this.errorCallbackSubject) {
            messages.push(' Error callback subject not set.');
        }

        if (!this.processStatusFnRef) {
            messages.push(' Status Check Function not set.');
        }

        validity = messages.length === 0;
        this.validationMessages = validity ? [] : [`ERROR!! Invalid Mateo Queue for ${this.apiurl}.`].concat(messages);

        return validity;
    }

    get HasToProcess(): boolean {
        return this.status && (
            this.status === MateoQueueStatus.QUEUED
            || this.status === MateoQueueStatus.INPROGRESS
            || this.status === MateoQueueStatus.POLLING
            || this.status === MateoQueueStatus.INITIALIZED);
    }

    get HasFailed(): boolean {
        return this.status && this.status === MateoQueueStatus.FAILED;
    }

    get HasSucceded(): boolean {
        return this.status && this.status === MateoQueueStatus.SUCCESS;
    }
    //#endregion
}

export enum MateoQueueStatus {
    INITIALIZED = 1,
    QUEUED = 2,
    INPROGRESS = 3,
    POLLING = 4,
    SUCCESS = 5,
    FAILED = 6
}

export enum MateoQueueType {
    GET = 'GET',
    PATCH = 'PATCH'
}

export interface IMeteoPageResultSet<T> {
    paging: IMeteoPaging;
    links: IPageLink[];
    items: T[];

}

export interface IMeteoPaging {
    totalItems: number;
    pageNumber: number;
    pageSize: number;
    totalPages: number;
}

export interface IPageLink {
    href: string;
    rel: string;
    type: string;
}
