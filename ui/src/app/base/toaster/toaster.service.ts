/* Schlumberger Private
Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
authored and generated code (including the selection and arrangement of
the source code base regardless of the authorship of individual files),
but not including any copyright interest(s) owned by a third party
related to source code or object code authored or generated by
non-Schlumberger personnel.

This source code includes Schlumberger confidential and/or proprietary
information and may include Schlumberger trade secrets. Any use,
disclosure and/or reproduction is prohibited unless authorized in
writing. */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { DataService } from 'src/app/base/service/data.service';
import { HttpClient } from '@angular/common/http';
import { LoggerService } from 'src/app/base/service/logger.service';

export class ToasterDataModel {
  title?: string;
  message: string;
}

@Injectable({
  providedIn: 'root'
})
export class AppToasterService extends DataService {

  constructor(private _http: HttpClient, _loggerServic: LoggerService) {
    super('AppToasterService', '', _http, _loggerServic);
  }

  public successObservable = new Subject<ToasterDataModel>();
  public errorObservable = new Subject<ToasterDataModel>();
  public warningObservable = new Subject<ToasterDataModel>();
  public informationObservable = new Subject<ToasterDataModel>();

  public ShowSuccess(message: string, title?: string) {
    const model = new ToasterDataModel();
    model.title = title;
    model.message = message;
    this.successObservable.next(model);
  }

  public ShowError(message: string, title?: string) {
    const model = new ToasterDataModel();
    model.title = title;
    model.message = message;
    this.errorObservable.next(model);
  }

  public ShowWarning(message: string, title?: string) {
    const model = new ToasterDataModel();
    model.title = title;
    model.message = message;
    this.warningObservable.next(model);
  }

  public ShowInformation(message: string, title?: string) {
    const model = new ToasterDataModel();
    model.title = title;
    model.message = message;
    this.informationObservable.next(model);
  }
}
