/* Schlumberger Private
Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
authored and generated code (including the selection and arrangement of
the source code base regardless of the authorship of individual files),
but not including any copyright interest(s) owned by a third party
related to source code or object code authored or generated by
non-Schlumberger personnel.

This source code includes Schlumberger confidential and/or proprietary
information and may include Schlumberger trade secrets. Any use,
disclosure and/or reproduction is prohibited unless authorized in
writing. */
import { Component, OnInit, Input, ChangeDetectionStrategy } from '@angular/core';
import { GridConfigModel } from 'src/app/sharedcomponents/models/sharedmodels';
import { DataResult } from '@progress/kendo-data-query';
import { BaseComponent } from 'src/app/base/component/base/base.component';
import { LoggerService } from 'src/app/base/service/logger.service';

@Component({
  selector: 'app-expand-collapse-groups',
  templateUrl: './expand-collapse-groups.component.html',
  styleUrls: ['./expand-collapse-groups.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush
})
export class ExpandCollapseGroupsComponent extends BaseComponent implements OnInit {

  @Input() public gridModel: GridConfigModel;

  constructor(_loggerService: LoggerService) {
    super('ExpandCollapseGroupsComponent', _loggerService);
    this.WriteDebugLog('ExpandCollapseGroupsComponent => constructor');
  }

  ngOnInit() {
    this.WriteDebugLog('ExpandCollapseGroupsComponent => ngOnInit');
    this.gridModel.expandCounter = this.gridModel.GroupSettings.length;
    this.gridModel.collapseCounter = this.gridModel.GroupSettings.length;
  }

  /**
   * It is use to collaps groups from grid it is use recersivly to collaps all records
   * @memberof ExpandCollapseGroupsComponent
   */
  public collapseGroups(): void {
    this.WriteDebugLog('ExpandCollapseGroupsComponent => collapseGroups');
    const data = this.gridModel.DataGridResult as DataResult;
    this.collapseRecursive(data.data);

    this.gridModel.expandCounter = 1;
    this.gridModel.collapseCounter = 1;

    this.gridModel.isCollapsed = true;
    this.gridModel.isExpanded = false;
    this.gridModel.isCollapsedLevel = false;
    this.gridModel.isExpandedLevel = false;
  }

  /**
   * It is use to expand groups from grid it is use recersivly to expand all records
   * @memberof ExpandCollapseGroupsComponent
   */
  public expandGroups(): void {
    this.WriteDebugLog('ExpandCollapseGroupsComponent => expandGroups');
    const data = this.gridModel.DataGridResult as DataResult;
    this.expandRecursive(data.data);

    this.gridModel.expandCounter = this.gridModel.GroupSettings.length;
    this.gridModel.collapseCounter = this.gridModel.GroupSettings.length;

    this.gridModel.isCollapsed = false;
    this.gridModel.isExpanded = true;
    this.gridModel.isCollapsedLevel = false;
    this.gridModel.isExpandedLevel = false;
  }

  /**
   * It is use to Collaps  from grid it is use recersivly to Collaps all records
   * @private
   * @param {any[]} items
   * @param {string} [prefix='']
   * @memberof ExpandCollapseGroupsComponent
   */
  private collapseRecursive(items: any[], prefix: string = ''): void {
    this.WriteDebugLog('ExpandCollapseGroupsComponent => collapseRecursive');
    let pageSkip = 0;
    for (let idx = 0; idx < items.length; idx++) {
      if (this.gridModel.skip > 0 && !prefix) {
        pageSkip = this.gridModel.skip;
      } else {
        pageSkip = 0;
      }
      const index = (prefix ? `${prefix}_` : '') + String(idx + pageSkip);
      this.gridModel.DataGridInstance.collapseGroup(index);
      if (items[idx].items) {
        this.collapseRecursive(items[idx].items, index);
      }
    }
  }

  /**
   * It is use to Expand  from grid it is use recersivly to Expand all records
   * @private
   * @param {any[]} items
   * @param {string} [prefix='']
   * @memberof ExpandCollapseGroupsComponent
   */
  private expandRecursive(items: any[], prefix: string = ''): void {
    this.WriteDebugLog('ExpandCollapseGroupsComponent => expandRecursive');
    let pageSkip = 0;
    for (let idx = 0; idx < items.length; idx++) {
      if (this.gridModel.skip > 0 && !prefix) {
        pageSkip = this.gridModel.skip;
      } else {
        pageSkip = 0;
      }
      const index = (prefix ? `${prefix}_` : '') + String(idx + pageSkip);
      this.gridModel.DataGridInstance.expandGroup(index);
      if (items[idx].items) {
        this.expandRecursive(items[idx].items, index);
      }
    }
  }

  /**
   * This is use to collapse group by one level
   * @memberof ExpandCollapseGroupsComponent
   */
  public collapseLevelGroups(): void {
    this.WriteDebugLog('ExpandCollapseGroupsComponent => collapseLevelGroups');
    const data = this.gridModel.DataGridResult as DataResult;
    if (this.gridModel.isCollapsed === undefined && this.gridModel.isExpanded === undefined &&
      this.gridModel.isCollapsedLevel === undefined && this.gridModel.isExpandedLevel === undefined) {
      this.gridModel.collapseCounter = this.gridModel.GroupSettings.length;
    }
    this.collapseLevelRecursive(data.data);

    if (this.gridModel.collapseCounter > 0) {
      this.gridModel.expandCounter = this.gridModel.collapseCounter;
      this.gridModel.collapseCounter--;
    }

    this.gridModel.isCollapsed = false;
    this.gridModel.isExpanded = false;
    this.gridModel.isCollapsedLevel = true;
    this.gridModel.isExpandedLevel = false;
  }

  /**
   * This is use to expand group by one level
   * @memberof ExpandCollapseGroupsComponent
   */
  public expandLevelGroups(): void {
    this.WriteDebugLog('ExpandCollapseGroupsComponent => expandLevelGroups');
    const data = this.gridModel.DataGridResult as DataResult;
    this.expandLevelRecursive(data.data);

    if (this.gridModel.GroupSettings.length >= this.gridModel.expandCounter) {
      this.gridModel.collapseCounter = this.gridModel.expandCounter;
      this.gridModel.expandCounter++;
    }

    this.gridModel.isCollapsed = false;
    this.gridModel.isExpanded = false;
    this.gridModel.isCollapsedLevel = false;
    this.gridModel.isExpandedLevel = true;
  }

  /**
   * It is use to expand groups from grid it is use recersivly to expand all records
   * @private
   * @param {any[]} items
   * @param {string} [prefix='']
   * @memberof ExpandCollapseGroupsComponent
   */
  private collapseLevelRecursive(items: any[], prefix: string = ''): void {
    this.WriteDebugLog('ExpandCollapseGroupsComponent => collapseLevelRecursive');
    let pageSkip = 0;
    for (let idx = 0; idx < items.length; idx++) {
      if (this.gridModel.skip > 0 && !prefix) {
        pageSkip = this.gridModel.skip;
      } else {
        pageSkip = 0;
      }
      const index = (prefix ? `${prefix}_` : '') + String(idx + pageSkip);
      if (index.split('_').length >= this.gridModel.collapseCounter) {
        this.gridModel.DataGridInstance.collapseGroup(index);
      }
      if (items[idx].items) {
        this.collapseLevelRecursive(items[idx].items, index);
      }
    }
  }

  /**
   * It is use to expand groups from grid it is use recersivly to expand all records
   * @private
   * @param {any[]} items
   * @param {string} [prefix='']
   * @memberof ExpandCollapseGroupsComponent
   */
  private expandLevelRecursive(items: any[], prefix: string = ''): void {
    this.WriteDebugLog('ExpandCollapseGroupsComponent => expandLevelRecursive');
    let pageSkip = 0;
    for (let idx = 0; idx < items.length; idx++) {
      if (this.gridModel.skip > 0 && !prefix) {
        pageSkip = this.gridModel.skip;
      } else {
        pageSkip = 0;
      }
      const index = (prefix ? `${prefix}_` : '') + String(idx + pageSkip);

      if (index.split('_').length <= this.gridModel.expandCounter) {
        this.gridModel.DataGridInstance.expandGroup(index);
      }
      if (items[idx].items) {
        this.expandLevelRecursive(items[idx].items, index);
      }
    }
  }


  /**
   * This method is used to Expand / Collape all the groups 
   * within a page. Based on the currently selected option the respective sub method is called.
   * IsCollapsed / Expanded denote the collapse/expand from the topmost group in hierarchy
   * IsExpandedLevel / IsCollapsedLevel denotes the expand/collapse group one level from the current level.
   * @memberof ExpandCollapseGroupsComponent
   */
  public pageChangeMaintainState(): void {
    this.WriteDebugLog('ExpandCollapseGroupsComponent => pageChangeMaintainState');
    if (this.gridModel.isCollapsed) {
      // To collaps all groups
      this.collapseGroups();
    } else if (this.gridModel.isExpanded) {
      // To expand all groups
      this.expandGroups();
    } else if (this.gridModel.isCollapsedLevel) {
      const cnt = this.gridModel.collapseCounter + 1;
      this.expandGroups();
      this.gridModel.collapseCounter = cnt;
      // To collaps one level group
      this.collapseLevelGroups();
    } else if (this.gridModel.isExpandedLevel) {
      const cnt = this.gridModel.expandCounter - 1;
      this.collapseGroups();
      this.gridModel.expandCounter = cnt;
      // To expand  one level group
      this.expandLevelGroups();
    }
  }

}
