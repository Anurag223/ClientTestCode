/* Schlumberger Private
Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
authored and generated code (including the selection and arrangement of
the source code base regardless of the authorship of individual files),
but not including any copyright interest(s) owned by a third party
related to source code or object code authored or generated by
non-Schlumberger personnel.

This source code includes Schlumberger confidential and/or proprietary
information and may include Schlumberger trade secrets. Any use,
disclosure and/or reproduction is prohibited unless authorized in
writing. */
// import { Component, OnInit, TemplateRef } from '@angular/core';
import {
  Component, OnInit, ViewChild, TemplateRef, ChangeDetectorRef, AfterViewInit, OnDestroy,
  Input, Output, EventEmitter, ChangeDetectionStrategy
} from '@angular/core';
import { HttpErrorResponse } from '@angular//common/http';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';
import {
  FavoriteSearchViewModel, ISearchFavorites, SearchFavorites,
  SearchFavoriteBase,
  SearchFavoriteDefaults
} from 'src/app/sharedcomponents/models/favorite-search-filter';
import { UserprofileService } from 'src/app/base/userprofile/userprofile.service';
import { FavoriteSearchFilterService } from 'src/app/sharedcomponents/favorite-search-filter/favorite-search-filter.service';
import { UserProfileViewModel } from 'src/app/base/models/userprofile';
import * as LO from 'lodash';
import { FMPHelper } from 'src/Constants/helpers';
import { AppToasterService } from '../../base/toaster/toaster.service';
import { BaseComponent } from 'src/app/base/component/base/base.component';
import { LoggerService } from 'src/app/base/service/logger.service';
import { Subscription } from 'rxjs';
@Component({
  selector: 'app-favorite-search-filter',
  templateUrl: './favorite-search-filter.component.html',
  styleUrls: ['./favorite-search-filter.component.scss']
  // changeDetection: ChangeDetectionStrategy.OnPush
})
export class FavoriteSearchFilterComponent extends BaseComponent implements OnInit, OnDestroy {

    @ViewChild('dropdownlist', { static: false }) public dropdownlist: any;
  public userProfileViewModel: UserProfileViewModel;
  // userProfileSubcription: Subscription;
  @Input() viewModel: FavoriteSearchViewModel;
  @Output() applyfilter: EventEmitter<SearchFavorites> = new EventEmitter();
  @Output() loadcomplete: EventEmitter<SearchFavorites> = new EventEmitter();

  config = {
    backdrop: true,
    ignoreBackdropClick: true,
    class: 'modal-fav modal-fav-search'
  };
  modalRef: BsModalRef;
    @ViewChild('FilterTemplate', { static: false }) FilterTemplate: TemplateRef<any>;

  constructor(private _modalService: BsModalService,
    private _userProfileService: UserprofileService,
    private _favoriteSearchFilterService: FavoriteSearchFilterService,
    private _toasterService: AppToasterService,
    _loggerService: LoggerService) {
    super('FavoriteSearchFilterComponent', _loggerService);
    this.WriteDebugLog('FavoriteSearchFilterComponent => constructor');
    this.userProfileViewModel = new UserProfileViewModel(this._userProfileService.dataModel);
    this.viewModel = new FavoriteSearchViewModel(this._favoriteSearchFilterService.dataModel);
  }

  ngOnInit() {
    this.WriteDebugLog('FavoriteSearchFilterComponent => ngOnInit');
    // this.userProfileSubcription = this._userProfileService.userRoleObservable.subscribe(role => {
    //   if (role.isInitLoad) {
    //     this.getAllFavoriteSearchFilter(this.userProfileViewModel.data.user.ldapAlias, this.viewModel.applicationName);
    //   }
    // });
    if (this.userProfileViewModel.data.user
      && this.userProfileViewModel.data.user.seletedRole
      && this.userProfileViewModel.data.user.seletedRole.seletedWorkLocations
      && this.userProfileViewModel.data.user.seletedRole.seletedWorkLocations.length > 0) {
      // fetch all fav search regarding current user
      this.getAllFavoriteSearchFilter(this.userProfileViewModel.data.user.ldapAlias, this.viewModel.applicationName);
    }
  }
  /**
   * getAllFavoriteSearchFilter is use to get all fav search which are assign to current user
   *
   * @param {*} userLdap
   * @param {*} appName
   * @memberof FavoriteSearchFilterComponent
   */
  getAllFavoriteSearchFilter(userLdap, appName) {
    this.WriteDebugLog('FavoriteSearchFilterComponent => getAllFavoriteSearchFilter');
    this._favoriteSearchFilterService.selectAllFavoriteSearchFilters(userLdap, appName).subscribe(res => {
      if (res && res.searchFavoritesBase && res.searchFavoritesBase.length > 0) {
        this.viewModel.data.searchFavoriteList = res.searchFavoritesBase.map(fav => new SearchFavoriteBase(fav));
        if (res.searchFavoriteDefaults && res.searchFavoriteDefaults.defaultSearchFavoriteID) {
          const defaultSearch: SearchFavoriteBase = this.viewModel.data.searchFavoriteList
            .find(f => f.favoriteID === res.searchFavoriteDefaults.defaultSearchFavoriteID);
          if (defaultSearch) {
            this.viewModel.data.setDefaultFavorite(defaultSearch);
            this.viewModel.favoriteFilterDDLBound = defaultSearch;
            this.onSearchFavoriteChange(this.viewModel.favoriteFilterDDLBound);
          } else {
            this.callEmitOfFilterLoadComplete(null);
          }
        } else {
          this.callEmitOfFilterLoadComplete(null);
        }
      } else {
        this.viewModel.data.searchFavoriteList = [];
        this.viewModel.favoriteFilterDDLBound = null;
        this.callEmitOfFilterLoadComplete(null);
      }
    }, error => this.WriteErrorLog('Error while fetching Search Favorites.', error));
  }
  /**
   * This event get fire when user change fav search from drop down it load fav default search and 
   * show grid result base on search critera
   *
   * @param {*} event
   * @memberof FavoriteSearchFilterComponent
   */
  onSearchFavoriteChange(event) {
    this.WriteDebugLog('FavoriteSearchFilterComponent => onSearchFavoriteChange');
    this.viewModel.favoriteFilterDDLBound = event;

    this._favoriteSearchFilterService.selectFavoriteSearchById(event.favoriteID).subscribe(res => {
      this.viewModel.favoriteFilterDetailsBound = new SearchFavorites(res);
      if (this.loadcomplete) {
        this.callEmitOfFilterLoadComplete(this.viewModel.favoriteFilterDetailsBound);
      } else {
        this.callEmitOfApplyFilter(this.viewModel.favoriteFilterDetailsBound);
      }
    });
  }

  onOpenSearchFavoritePopup() {
    this.WriteDebugLog('FavouriteSearchFilter => onOpenSearchFavoritePopup');
    // if (this.viewModel.favoriteFilterDetailsBound) {
    if (this.viewModel.favoriteFilterDetailsBound && this.viewModel.favoriteFilterDDLBound) {
      this.viewModel.favoriteFilterPopUpBound = new SearchFavorites(this.viewModel.favoriteFilterDetailsBound);
      const defaultFavorite = this.viewModel.data.searchFavoriteList.find(fav => fav.isDefault);
      if (defaultFavorite) {
        this.viewModel.favoriteFilterPopUpBound.isDefault =
          FMPHelper.StringEqual(this.viewModel.favoriteFilterPopUpBound.searchFavoritesName, defaultFavorite.searchFavoritesName);
      }
    } else {
      this.viewModel.favoriteFilterPopUpBound = new SearchFavorites(null);
    }
    this.modalRef = this._modalService.show(this.FilterTemplate, this.config);
  }

  onSearchFavoriteNameChange(event) {
    this.WriteDebugLog('FavoriteSearchFilterComponent => onSearchFavoriteNameChange');
    this.viewModel.favoriteFilterPopUpBound.searchFavoritesName = event;
    if (this.viewModel.favoriteFilterPopUpBound && this.viewModel.favoriteFilterPopUpBound.isNameValid) {
      const foundSearchFavorite = LO.find<SearchFavoriteBase>(this.viewModel.data.searchFavoriteList,
        fav => FMPHelper.StringEqual(fav.searchFavoritesName, this.viewModel.favoriteFilterPopUpBound.searchFavoritesName));
      if (foundSearchFavorite) {
        this.viewModel.favoriteFilterPopUpBound.isDefault = foundSearchFavorite.isDefault;
      } else {
        this.viewModel.favoriteFilterPopUpBound.isDefault = false;
      }
    }
  }

  onSetFavoriteSearchDefault(event, dataItem: SearchFavoriteBase) {
    this.WriteDebugLog('FavoriteSearchFilterComponent => onSetFavoriteSearchDefault');
    const saveSearchFavoriteDefault = new SearchFavoriteDefaults(null);
    saveSearchFavoriteDefault.userID = this.userProfileViewModel.data.user.ldapAlias;
    saveSearchFavoriteDefault.applicationName = this.viewModel.applicationName;
    saveSearchFavoriteDefault.defaultSearchFavoriteID = dataItem.favoriteID;
    if (!dataItem.isDefault) {
      this._favoriteSearchFilterService.updateFavoriteSearchDefault(saveSearchFavoriteDefault).subscribe(resupdate => {
        if (resupdate) {
          if (!dataItem.isDefault) {
            this.viewModel.data.setDefaultFavorite(dataItem);
            this.viewModel.favoriteFilterPopUpBound.isDefault = dataItem.isDefault;
          }
        }
      }, error => this.WriteDebugLog(error));
    } else {
      this._favoriteSearchFilterService.deleteDefaultFavorite(this.userProfileViewModel.data.user.ldapAlias,
        this.viewModel.applicationName, dataItem.favoriteID).subscribe(resdelete => {
          if (resdelete) {
            dataItem.isDefault = false;
          }
        }, error => this.WriteDebugLog(error));
    }

  }

  onDeleteSearchFavorite(event, dataItem: SearchFavoriteBase) {
    this.WriteDebugLog('FavoriteSearchFilterComponent => onDeleteSearchFavorite');
    event.preventDefault();
    event.stopPropagation();
    this._favoriteSearchFilterService.deleteFavoriteSearchFilter(dataItem.favoriteID).subscribe(remove => {
      if (remove) {
        LO.remove<SearchFavoriteBase>(this.viewModel.data.searchFavoriteList,
          fav => fav.favoriteID === dataItem.favoriteID);
        this._toasterService.ShowSuccess(`${dataItem.searchFavoritesName} successfully deleted.`);
        if (this.viewModel.favoriteFilterDDLBound.favoriteID === dataItem.favoriteID
          && this.viewModel.data.searchFavoriteList.length > 0) {
          this.viewModel.favoriteFilterDDLBound = this.viewModel.data.searchFavoriteList[0];
        } else {
          this.viewModel.favoriteFilterDDLBound = null;
        }
        // this._toasterService.ShowSuccess(`${dataItem.searchFavoritesName} successfully deleted.`);
        this.viewModel.favoriteFilterDetailsBound = null;
      }
    });
  }
/**
 * This method is use to save the fav search. Fav search is save base on LDAP id. 
 *
 * @memberof FavoriteSearchFilterComponent
 */
onSaveSearchFavorite() {
    this.WriteDebugLog('FavoriteSearchFilterComponent => onSaveSearchFavorite');
    const foundSearchFavorite = LO.find<SearchFavoriteBase>(this.viewModel.data.searchFavoriteList,
      fav => FMPHelper.StringEqual(fav.searchFavoritesName, this.viewModel.favoriteFilterPopUpBound.searchFavoritesName));
    if (foundSearchFavorite) {
      this._favoriteSearchFilterService.selectFavoriteSearchById(foundSearchFavorite.favoriteID).subscribe(resget => {
        const updateInstance = new SearchFavorites(resget);
        updateInstance.isDefault = this.viewModel.favoriteFilterPopUpBound.isDefault;
       // updateInstance.searchCriteria = JSON.stringify(this.viewModel.searchModel.getSearchFavoriteForPersistance());
        this._favoriteSearchFilterService.updateFavoriteSearchFilter(updateInstance).subscribe(resupdate => {
          if (resupdate > 0) {
            this.viewModel.favoriteFilterDDLBound.isDefault = this.viewModel.favoriteFilterPopUpBound.isDefault;
            this.viewModel.favoriteFilterDetailsBound = updateInstance;

            if (!updateInstance.isDefault) {
              this._favoriteSearchFilterService.deleteDefaultFavorite(this.userProfileViewModel.data.user.ldapAlias,
                this.viewModel.applicationName, updateInstance.favoriteID).subscribe(resPut => {
                  if (resPut) {
                    updateInstance.isDefault = false;
                  }
                }, error => this.WriteDebugLog(error));
            } else {
              this.viewModel.data.setDefaultFavorite(foundSearchFavorite);
            }
            this.callEmitOfApplyFilter(updateInstance);
            this.onCloseSearchFavorite();

            this._toasterService.ShowSuccess(`${foundSearchFavorite.searchFavoritesName} successfully updated.`);
          } else {
            this._toasterService.ShowError(`${foundSearchFavorite.searchFavoritesName} save failed.`);
          }
        }, error => this.WriteErrorLog('Error while updating search favorite.', error));
      }, error => this.WriteErrorLog('Error while get search favorite details.', error));
    } else {
      const insertInstance = new SearchFavorites(this.viewModel.favoriteFilterPopUpBound);
      insertInstance.favoriteID = 0;
      insertInstance.userID = this.userProfileViewModel.data.user.ldapAlias;
      insertInstance.applicationName = this.viewModel.applicationName;
     // insertInstance.searchCriteria = JSON.stringify(this.viewModel.searchModel.getSearchFavoriteForPersistance());

      this._favoriteSearchFilterService.insertFavoriteSearchFilter(insertInstance).subscribe(resinsert => {
        if (resinsert > 0) {
          insertInstance.favoriteID = resinsert;
          const saveFavBaseInst: SearchFavoriteBase = new SearchFavoriteBase(null);
          saveFavBaseInst.favoriteID = insertInstance.favoriteID;
          saveFavBaseInst.searchFavoritesName = insertInstance.searchFavoritesName;
          this.viewModel.data.searchFavoriteList.push(saveFavBaseInst);
          if (insertInstance.isDefault) {
            this.viewModel.data.setDefaultFavorite(saveFavBaseInst);
          }
          this.viewModel.favoriteFilterDDLBound = saveFavBaseInst;
          this.onCloseSearchFavorite();
          this.callEmitOfApplyFilter(insertInstance);

          this._favoriteSearchFilterService.selectFavoriteSearchById(insertInstance.favoriteID).subscribe(newFilter => {
            // this.viewModel.favoriteFilterDDLBound = newFilter;
            this.viewModel.favoriteFilterDDLBound = insertInstance;

            this.viewModel.favoriteFilterDetailsBound = insertInstance;
          });
          this._toasterService.ShowSuccess(`${insertInstance.searchFavoritesName} successfully saved.`);
        } else {
          this._toasterService.ShowError(`${insertInstance.searchFavoritesName} save failed.`);
        }
      }, err => {
        this.WriteErrorLog('Search Favorite Insert Failed', err);
        this._toasterService.ShowError(`${insertInstance.searchFavoritesName} save failed.`);
      });
    }
  }

  onCloseSearchFavorite() {
    this.WriteDebugLog('FavoriteSearchFilterComponent => onCloseSearchFavorite');
    this.viewModel.favoriteFilterPopUpBound = null;
    this.modalRef.hide();
  }

  callEmitOfApplyFilter(searchFavoriteModel: SearchFavorites) {
    this.WriteDebugLog('FavoriteSearchFilterComponent => callEmitOfApplyFilter');
    let filterInstance: any = null;
    if (searchFavoriteModel) {
      const jsonString: string = searchFavoriteModel.searchCriteria.replace(/'/g, '\"');
      filterInstance = JSON.parse(jsonString);
    }
    this.loadcomplete = null;
    this.applyfilter.emit(filterInstance);
  }

  callEmitOfFilterLoadComplete(searchFavoriteModel: SearchFavorites) {
    this.WriteDebugLog('FavoriteSearchFilterComponent => callEmitOfFilterLoadComplete');
    if (this.loadcomplete) {
      let filterInstance: any = null;
      if (searchFavoriteModel) {
        const jsonString: string = searchFavoriteModel.searchCriteria.replace(/'/g, '\"');
        filterInstance = JSON.parse(jsonString);
      }
      this.loadcomplete.emit(filterInstance);
      // Ensure the load complete is only called once.
      this.loadcomplete = null;
    }

  }

  ngOnDestroy() {
    // if (this.userProfileSubcription) {
    //   this.userProfileSubcription.unsubscribe();
    // }
  }
}
