/* Schlumberger Private
Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
authored and generated code (including the selection and arrangement of
the source code base regardless of the authorship of individual files),
but not including any copyright interest(s) owned by a third party
related to source code or object code authored or generated by
non-Schlumberger personnel.

This source code includes Schlumberger confidential and/or proprietary
information and may include Schlumberger trade secrets. Any use,
disclosure and/or reproduction is prohibited unless authorized in
writing. */
import { FMPConstant } from '../../../Constants/constant';

import * as LO from 'lodash';
import { ColumnComponent } from '@progress/kendo-angular-grid';
import {
  GroupDescriptor,
  FilterDescriptor,
  SortDescriptor,
  CompositeFilterDescriptor,
} from '@progress/kendo-data-query';
import { UserProfile } from '../../base/models/userprofile';
import { FMPHelper } from '../../../Constants/helpers';
export interface ILayoutResponse {
  activeLayouts: IActiveLayout;
  layouts: ILayout[];
}

export interface IActiveLayout {
  activeLayoutID: number;
  applicationName: string;
  userID: string;
}

export interface ILayout {
  layoutID: number;
  userID: string;
  applicationName: string;
  layoutType: LayoutTypes;
  layoutName: string;
  layoutConfigs: ILayoutColumn[];
  group: any;
  sort: any;
  filter: any;
}

export interface ILayoutColumn {
  columnId: number;
  columnName: string;
  fieldName: string;
  disabled: boolean;
  isDefault: boolean;
  isLocked: boolean;
  layoutName: string;
  sequence: number;
  toolTip: boolean;
}

export class Layout implements ILayout {
  constructor(layout: ILayout) {
    if (layout) {
      this.layoutID = layout.layoutID;
      this.layoutName = layout.layoutName;
      this.layoutType = layout.layoutType;
      this.userID = layout.userID;
      this.applicationName = layout.applicationName;
      if (layout.layoutConfigs) {
        this.layoutConfigs = [];
        layout.layoutConfigs.forEach(lc =>
          this.layoutConfigs.push(new LayoutColumn(lc)),
        );
      }
      this.group = layout.group;
      this.sort = layout.sort;
      this.filter = layout.filter;
    }
  }

  layoutID: number;
  layoutName: string;
  layoutType: LayoutTypes;
  userID: string;
  applicationName: string;
  layoutConfigs: LayoutColumn[];
  isSeperator: boolean;
  isNew: boolean;

  DisabledIndexes: number[] = [];
  group: GroupDescriptor[];
  sort: SortDescriptor[] = [];
  filter: CompositeFilterDescriptor;

  get isDefault(): boolean {
    return FMPHelper.StringEqual(this.userID, FMPConstant.SystemUser);
  }

  get isPublic(): boolean {
    return FMPHelper.StringEqual(this.layoutType, LayoutTypes.Public);
  }
}

export class LayoutColumn implements ILayoutColumn {
  constructor(layoutData: ILayoutColumn) {
    if (layoutData) {
      this.columnId = layoutData.columnId;
      this.columnName = layoutData.columnName;
      this.fieldName = layoutData.fieldName;
      this.disabled = layoutData.disabled;
      this.isDefault = layoutData.isDefault;
      this.isLocked = layoutData.isLocked;
      this.layoutName = layoutData.layoutName;
      this.sequence = layoutData.sequence;
      this.toolTip = layoutData.toolTip;
    }
  }

  columnId: number;
  columnName: string;
  fieldName: string;
  disabled: boolean;
  isDefault: boolean;
  isLocked: boolean;
  layoutName: string;
  sequence: number;
  toolTip: boolean;

  gridColumn: ColumnComponent;
  selectedColumn: LayoutColumn;
  DropDownSource: LayoutColumn[];
}

export class SideNavDataModel {
  WorkCenterLayouts: Layout[] = [];
  PnSLayouts: Layout[] = [];
  ActivityMonitorLayouts: Layout[] = [];

  /**
   * This method segregates and stores the layouts fetched
   * for the current user as DefaultOptions and UserOptions
   */
  storeLayoutData(appName: string, layouts: Layout[]) {
    switch (appName) {
      case FMPConstant.workCenter:
        this.WorkCenterLayouts = this.sortLayouts(layouts);
        break;
      case FMPConstant.planandSchedule:
        this.PnSLayouts = this.sortLayouts(layouts);
        break;
      case FMPConstant.activityMonitor:
        this.ActivityMonitorLayouts = this.sortLayouts(layouts);
        break;
      default:
        throw new Error(
          `The appName ${appName} is not recognized in layout mapping.`,
        );
    }
  }

  /**
   * This merthod sorts the Layouts fetched for Current user
   * It also segregates the Default Tempaltes and Custom Templates
   * It marks the First template from custom template as first if the user has any Custom templates saved
   */
  private sortLayouts(layouts: Layout[]): Layout[] {
    const defaultOptions = LO.filter<Layout>(layouts, l => l.isDefault);
    const userOptions = LO.filter<Layout>(layouts, l => !l.isDefault);
    return [...defaultOptions, ...userOptions];
  }
}

export class SideNavViewModel {
  constructor(navData: SideNavDataModel) {
    this.data = navData;
  }

  user: UserProfile;
  application: string;
  panelHeader: string;
  showColumnOptions: boolean;
  LayoutsInContext: Layout[] = [];
  PublicLayoutsInContext: Layout[] = [];
  data: SideNavDataModel;
  selectedLayout: Layout;
  AllColumns: LayoutColumn[];

  columnOptionsBound: Layout;

  get hasWorkCenterLayouts(): boolean {
    return this.data &&
      this.data.WorkCenterLayouts &&
      this.data.WorkCenterLayouts.length > 0
      ? true
      : false;
  }

  get isLayoutNameValid(): boolean {
    let returnValue = false;
    if (
      this.columnOptionsBound &&
      this.columnOptionsBound.layoutName &&
      this.columnOptionsBound.layoutName.trim().length > 0 &&
      !LO.some<Layout>(
        this.LayoutsInContext,
        l =>
          FMPHelper.StringEqual(
            l.layoutName,
            this.columnOptionsBound.layoutName,
          ) && FMPHelper.StringEqual(l.userID, this.user.ldapAlias),
      )
    ) {
      returnValue = true;
    }

    return returnValue;
  }

  get isSavingEnabled(): boolean {
    let returnValue = true;

    if (!this.columnOptionsBound.isNew) {
      returnValue = FMPHelper.StringEqual(
        this.user.ldapAlias,
        this.selectedLayout.userID,
      );
    }

    returnValue =
      returnValue &&
      this.columnOptionsBound &&
      !this.columnOptionsBound.isDefault;
    returnValue =
      returnValue && this.columnOptionsBound.isNew
        ? this.isLayoutNameValid
        : returnValue;

    return returnValue;
  }

  get usersPublicFavLayouts(): Layout[] {
    return this.LayoutsInContext.filter(
      l => l.isPublic && !FMPHelper.StringEqual(l.userID, this.user.ldapAlias),
    );
  }

  get usersAllLayouts(): Layout[] {
    return this.LayoutsInContext.filter(
      l =>
        !FMPHelper.StringEqual(l.layoutType, LayoutTypes.System) &&
        !l.isSeperator,
    );
  }

  get usersLayouts(): Layout[] {
    return this.LayoutsInContext.filter(l =>
      FMPHelper.StringEqual(l.userID, this.user.ldapAlias),
    );
  }
}

export enum LayoutTypes {
  Public = 'Public',
  Private = 'Private',
  System = 'System',
}
