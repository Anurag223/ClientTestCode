
/* Schlumberger Private
Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
authored and generated code (including the selection and arrangement of
the source code base regardless of the authorship of individual files),
but not including any copyright interest(s) owned by a third party
related to source code or object code authored or generated by
non-Schlumberger personnel.

This source code includes Schlumberger confidential and/or proprietary
information and may include Schlumberger trade secrets. Any use,
disclosure and/or reproduction is prohibited unless authorized in
writing. */
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError ,  Subject } from 'rxjs';
import { DataService } from 'src/app/base/service/data.service';
import { Layout, SideNavDataModel, ILayoutResponse, IActiveLayout, ILayout } from 'src/app/sharedcomponents/models/sidenav-overlay';
import { IUserProfileLayout } from 'src/app/sharedcomponents/models/columnoptions';
import { LoggerService } from '../../base/service/logger.service';
import { FMPHelper } from 'src/Constants/helpers';

import { map, catchError, tap } from 'rxjs/operators';
import { PatchJson } from '../../base/models/patchjson';

@Injectable({
  providedIn: 'root'
})
export class ColumnOptionsService extends DataService {
  dataModel: SideNavDataModel;
  layoutChangeObservable: Subject<Layout>;
  detectFilterChangesObservable: Subject<boolean>;

  /**
   * Creates an instance of ColumnOptionsService.
   * @param {HttpClient} _http
   * @param {PNSConfigService} _pnsConfigService
   * @param {LoggerService} _loggerService
   * @memberof ColumnOptionsService
   */
  constructor(private _http: HttpClient,  _loggerService: LoggerService) {
    super('ColumnOptionsService', FMPHelper.ApplicationSettings.layoutAPI, _http, _loggerService);
    this.dataModel = new SideNavDataModel();
    this.layoutChangeObservable = new Subject<Layout>();
    this.detectFilterChangesObservable = new Subject<boolean>();
  }

  /**
 * This method returns the Layouts saved in Mongo Database 
 * against the current user based on Users ldap Id and the Application name
 * @param {string} user
 * @param {string} appName
 * @returns {Observable<ILayoutResponse>}
 * @memberof SideNavOverlayService
 */
  getLayoutsforUserandApp(user: string, appName: string): Observable<ILayoutResponse> {
    const url = `${FMPHelper.ApplicationSettings.userProfileAPI}GetUserProfile?applicationName=${appName}&LDAP=${user}`;
    return this.selectall<ILayoutResponse>(url).pipe(
      map(response => {
        const layouts: Layout[] = response.layouts.map(il => new Layout(il));
        this.dataModel.storeLayoutData(appName, layouts);
        return response;
      }));
  }

  getLayoutsByUserAndApp(ldap: string, application: string): Observable<ILayoutResponse> {
    return this.select<ILayoutResponse>(application);
  }

  getPublicLayoutsByUserAndApp(ldap: string, application: string): Observable<ILayout[]> {
    return this.select<ILayout[]>(`${application}/Public`);
  }

  patchUserLayoutPreferences(ldap: string, application: string, patchJson: PatchJson) {
    const customurl = `${this.url}/${application}`;
    return this.updatepatch(patchJson, customurl);
  }

  /**
   * This function triggers a notification event to the subscribers that user changes the active layout.
   *
   * @param {Layout} layout
   * @memberof ColumnOptionsService
   */
  triggerLayoutChange(layout: Layout) {
    this.WriteDebugLog('ColumnOptionsService => triggerLayoutChange');
    this.layoutChangeObservable.next(layout);
  }

  /**
   *  Insert/Update the active layout into Mongo db.
   *
   * @param {IUserProfileLayout} modifiedLayoutData
   * @returns {Observable<any>}
   * @memberof ColumnOptionsService
   */
  SaveModifiedLayout(modifiedLayoutData: IUserProfileLayout): Observable<number> {
    this.WriteDebugLog('ColumnOptionsService => triggerLayoutChange');
    // const url = `${FMPHelper.ApplicationSettings.userProfileAPI}SaveUserProfile`;
    // return this._http.post<any>(url, modifiedLayoutData)
    //   .pipe(
    //     catchError(this.handleError));
    return this.create<number>(modifiedLayoutData);
  }

  /**
   * Delete the layout from the Mongo db using layout id.
   *
   * @param {number} layId
   * @returns {Observable<any>}
   * @memberof ColumnOptionsService
   */
  deleteLayoutById(layId: number): Observable<any> {
    this.WriteDebugLog('ColumnOptionsService => triggerLayoutChange');
    // const deleteUrl = `${FMPHelper.ApplicationSettings.userProfileAPI}RemoveLayout/${layId}`;
    // return this._http.delete<any>(deleteUrl);
    return this.delete(layId);
  }

  /**
   * Update active layout changes into the Mongo db.
   *
   * @param {IActiveLayout} activeLayout
   * @returns {Observable<any>}
   * @memberof ColumnOptionsService
   */
  saveActiveLayout(activeLayout: IActiveLayout): Observable<any> {
    this.WriteDebugLog('ColumnOptionsService => triggerLayoutChange');
    return this.update(activeLayout);
    // const url = `${FMPHelper.ApplicationSettings.userProfileAPI}UpdateActiveLayout`;
    // return this._http.post<any>(url, activeLayout)
    //   .pipe(
    //     catchError(this.handleError));
  }

  updateDbLayoutMappings(): Observable<boolean> {
    const applicationName = 'ActivityMonitor';
    this.WriteDebugLog('ColumnOptionsService => updateDbLayoutMappings');
    const url = `${FMPHelper.ApplicationSettings.userProfileAPI}/UpdateDbLayoutColumnMappings`;
    return this.selectall(url);
  }
}
