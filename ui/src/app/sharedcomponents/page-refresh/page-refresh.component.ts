/* Schlumberger Private
Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
authored and generated code (including the selection and arrangement of
the source code base regardless of the authorship of individual files),
but not including any copyright interest(s) owned by a third party
related to source code or object code authored or generated by
non-Schlumberger personnel.

This source code includes Schlumberger confidential and/or proprietary
information and may include Schlumberger trade secrets. Any use,
disclosure and/or reproduction is prohibited unless authorized in
writing. */
import {
  Component,
  HostListener,
  EventEmitter,
  Output,
  Input,
  OnInit,
  ChangeDetectionStrategy,
  OnDestroy,
  ChangeDetectorRef,
} from '@angular/core';
import { UserProfileViewModel } from 'src/app/base/models/userprofile';
import { UserprofileService } from 'src/app/base/userprofile/userprofile.service';
import { BaseComponent } from 'src/app/base/component/base/base.component';
import { LoggerService } from 'src/app/base/service/logger.service';
import { FMPHelper } from 'src/Constants/helpers';

const refreshDataOptions: IRefreshDataOptions[] = [
  { Description: 'UPDATE.NO_UPDATE', value: 0 },
  { Description: 'UPDATE.UPDATE_120', value: 120 },
  { Description: 'UPDATE.UPDATE_60', value: 60 },
  { Description: 'UPDATE.UPDATE_30', value: 30 },
  { Description: 'UPDATE.UPDATE_15', value: 15 },
];

@Component({
  selector: 'app-page-refresh',
  templateUrl: './page-refresh.component.html',
  styleUrls: ['./page-refresh.component.scss'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class PageRefreshComponent extends BaseComponent
  implements OnInit, OnDestroy {
  public refreshDataOptions: IRefreshDataOptions[];
  public refresh: any;
  public updatedDate: Date;
  public timezoneName: string;
  public userProfileViewModel: UserProfileViewModel;
  public showWarningFlag = false;
  public warningTimeLeft = 60;
  public warningIntervel: any;
  public refreshWarningTimeout: any;

  @Output() pageRefresh = new EventEmitter();
  @Input() applicationName: string;

  constructor(
    private _userProfileService: UserprofileService,
    private changeDetector: ChangeDetectorRef,
    _loggerService: LoggerService,
  ) {
    super('PageRefreshComponent', _loggerService);
  }
  // We are fething users interval settings and show it on drop down
  ngOnInit() {
    this.showWarningFlag = false;
    this.userProfileViewModel = new UserProfileViewModel(
      this._userProfileService.dataModel,
    );
    this.refreshDataOptions = refreshDataOptions;
    if (
      FMPHelper.ApplicationSettings.IsLocal ||
      FMPHelper.ApplicationSettings.IsDevelopment
    ) {
      if (this.refreshDataOptions.filter(s => s.value === 5).length === 0) {
        this.refreshDataOptions.push({
          Description: 'UPDATE.UPDATE_5',
          value: 5,
        });
      }
    }
    if (
      this.userProfileViewModel.data.user.refreshInterval &&
      this.userProfileViewModel.data.user.refreshInterval > 0
    ) {
      this.startInterval();
    } else {
      this.userProfileViewModel.data.user.refreshInterval = 0;
    }
    this.updatedDate = new Date();
    this.timezoneName = FMPHelper.CurrentTimeZone;
  }

  /**
   * We are clearing intervals in this method
   * @memberof PageRefreshComponent
   */
  ngOnDestroy() {
    this.endInterval(false);
  }

  /**
   * This method is use to set the interval for respective user
   *
   * @memberof PageRefreshComponent
   */
  startInterval() {
    if (
      this.userProfileViewModel.data.user.refreshInterval &&
      this.userProfileViewModel.data.user.refreshInterval > 0
    ) {
      this.refresh = setInterval(
        () => this.refreshData(),
        this.userProfileViewModel.data.user.refreshInterval * 60 * 1000,
      );
      this.refreshWarningTimeout = setTimeout(
        () => this.startWarningTimer(),
        (this.userProfileViewModel.data.user.refreshInterval - 1) * 60 * 1000,
      );
    }
  }

  /**
   * This method get fire when user select dont update setting in drop down
   * @memberof PageRefreshComponent
   */
  endInterval(shouldDetectChanges: boolean) {
    if (this.refresh) {
      clearInterval(this.refresh);
      clearTimeout(this.refreshWarningTimeout);
      clearInterval(this.warningIntervel);
    }
    this.showWarningFlag = false;
    if (shouldDetectChanges) {
      this.changeDetector.detectChanges();
    }
  }

  /**
   *
   * This method get call once users interval time get hit.
   * page on this method we are refreshing grid data
   * @memberof PageRefreshComponent
   */
  refreshData(updateClickFlag?: string) {
    this.updatedDate = new Date();
    this.changeDetector.detectChanges();
    this.pageRefresh.emit();
    if (updateClickFlag !== 'updateClicked') {
      clearTimeout(this.refreshWarningTimeout);
      this.refreshWarningTimeout = setTimeout(
        () => this.startWarningTimer(),
        (this.userProfileViewModel.data.user.refreshInterval - 1) * 60 * 1000,
      );
    }
  }

  /**
   * This event is trigger after interval time check box get checked/unchecked
   *
   * @param {*} evt
   * @memberof PageRefreshComponent
   */
  handleChange(evt) {
    this.userProfileViewModel.data.user.refreshInterval = evt;
    this.saveIntervalInformation();
    this.endInterval(true);
    if (evt && evt > 0) {
      this.startInterval();
    }
  }

  /**
   * This method will get call every time before one minute of refresh method
   * It will show the warning timer to the user
   *
   * @memberof PageRefreshComponent
   */
  startWarningTimer() {
    this.warningTimeLeft = 60;
    this.showWarningFlag = true;
    this.changeDetector.detectChanges();
    this.warningIntervel = setInterval(() => {
      if (this.warningTimeLeft > 0) {
        this.warningTimeLeft--;
      } else {
        this.endWarningTimer();
      }
      this.changeDetector.detectChanges();
    }, 1000);
  }

  /**
   * This method will get call every time at the end of warning timer
   * It will remove the timer interval
   *
   * @memberof PageRefreshComponent
   */
  endWarningTimer() {
    clearInterval(this.warningIntervel);
    this.showWarningFlag = false;
    this.changeDetector.detectChanges();
  }

  /**
   * This method is use to save users refresh intervals time
   * @memberof PageRefreshComponent
   */
  saveIntervalInformation() {
    const userldap = this.userProfileViewModel.data.user.ldapAlias;
    this._userProfileService
      .saveRefreshIntervalInformation(
        userldap,
        this.applicationName,
        this.userProfileViewModel.data.user.refreshInterval,
      )
      .subscribe(result => {});
  }
}

export interface IRefreshDataOptions {
  Description: string;
  value: number;
}
