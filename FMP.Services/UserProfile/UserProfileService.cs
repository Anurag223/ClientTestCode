#region Header

/// <summary>
/// Schlumberger Private
/// Copyright 2018 Schlumberger.All rights reserved in Schlumberger
/// authored and generated code(including the selection and arrangement of
/// the source code base regardless of the authorship of individual files),
/// but not including any copyright interest(s) owned by a third party
/// related to source code or object code authored or generated by
/// non-Schlumberger personnel.
/// This source code includes Schlumberger confidential and/or proprietary
/// information and may include Schlumberger trade secrets.Any use,
/// disclosure and/or reproduction is prohibited unless authorized in
/// writing.
/// </summary>

#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using FMP.Model.LayoutDataModel;
using FMP.Model.UserProfileDataModel;
using FMP.Repository.UserProfile.Interface;
using FMP.Service.Layout;
using FMP.Service.User;
using FMP.Service.UserProfile.Interface;
using FMPLayout = FMP.Model.LayoutDataModel.Layout;
using FMPUserProfile = FMP.Model.UserProfileDataModel.UserProfile;
using FMPUser = FMP.Model.UserDataModel.User;

#pragma warning disable 1591

namespace FMP.Service.UserProfile
{
    public class UserProfileService : IUserProfileService
    {
        private readonly IQueryHandler<IQuery<FMPUserProfile>, FMPUserProfile> _activeUserProfileByLdap;

        private readonly ICommandHandler<ICreateCommand<FMPLayout>> _createLayoutCommandHandler;
        private readonly ICommandHandler<ICreateCommand<UserLayoutPreference>> _createUserLayoutPreference;
        private readonly ICommandHandler<ICreateCommand<FMPUserProfile>> _createUserProfile;
        private readonly IQueryHandler<IQuery<FMPLayout>, FMPLayout> _layoutForAppAndUser;
        private readonly ICommandHandler<IUpdateCommand<FMPLayout>> _updateLayout;
        private readonly ICommandHandler<IUpdateCommand<UserLayoutPreference>> _updateUserLayoutPreference;

        private readonly ICommandHandler<IUpdateCommand<FMPUserProfile>> _updateUserProfile;
        //private readonly ICommandHandler<IUpdateCollCommand<FMPUserProfile>> _updateUserProfiles;

        private readonly IQueryHandler<IQuery<FMPUserProfile>, bool> _userExists;
        private readonly IQueryHandler<IQuery<UserLayoutPreference>, UserLayoutPreference> _userLayoutPreference;
        private readonly IQueryHandler<IQuery<FMPLayout>, IReadOnlyList<FMPLayout>> _userLayouts;
        private readonly IUserProfileRepository _userProfileRepository;
        private readonly IQueryHandler<IQuery<FMPUserProfile>, IReadOnlyList<FMPUserProfile>> _userProfiles;
        private readonly IQueryHandler<IQuery<FMPUser>, FMPUser> _users;

        public UserProfileService(IUserProfileRepository userProfileRepository,
            IQueryHandler<IQuery<FMPUserProfile>, FMPUserProfile> activeUserProfileByLdap,
            IQueryHandler<IQuery<FMPLayout>, IReadOnlyList<FMPLayout>> userLayouts,
            IQueryHandler<IQuery<FMPUserProfile>, bool> userExists,
            IQueryHandler<IQuery<UserLayoutPreference>, UserLayoutPreference> userLayoutPreference,
            ICommandHandler<ICreateCommand<FMPUserProfile>> createUserProfile,
            IQueryHandler<IQuery<FMPLayout>, FMPLayout> layoutForAppAndUser,
            ICommandHandler<ICreateCommand<FMPLayout>> createLayoutCommandHandler,
            ICommandHandler<IUpdateCommand<FMPLayout>> updateLayout,
            ICommandHandler<ICreateCommand<UserLayoutPreference>> createUserLayoutPreference,
            ICommandHandler<IUpdateCommand<UserLayoutPreference>> updateUserLayoutPreference,
            ICommandHandler<IUpdateCommand<FMPUserProfile>> updateUserProfile,
            IQueryHandler<IQuery<FMPUser>, FMPUser> users,
            IQueryHandler<IQuery<FMPUserProfile>, IReadOnlyList<FMPUserProfile>> userProfiles)
        {
            _userProfileRepository = userProfileRepository;
            _activeUserProfileByLdap = activeUserProfileByLdap;
            _userLayouts = userLayouts;
            _userExists = userExists;
            _userLayoutPreference = userLayoutPreference;
            _createUserProfile = createUserProfile;
            _layoutForAppAndUser = layoutForAppAndUser;
            _createLayoutCommandHandler = createLayoutCommandHandler;
            _updateLayout = updateLayout;
            _createUserLayoutPreference = createUserLayoutPreference;
            _updateUserLayoutPreference = updateUserLayoutPreference;
            _updateUserProfile = updateUserProfile;
            _users = users;
            _userProfiles = userProfiles;
        }

        public async Task<ColumnOptionData> GetUserProfile(string userID, string applicationName)
        {
            var userProfileExists = await UserProfileExistsFor(userID);

            var result = ColumnOptionData.Create();

            if (userProfileExists)
            {
                var userLayouts = await UserLayoutsFor(userID, applicationName);

                result.Layouts.AddRange(userLayouts.OrderBy(o => o.LayoutName));

                var layoutPreference = await GetUserLayoutPreferenceFor(userID, applicationName);
                result.ActiveLayouts = layoutPreference;
            }

            var defaultUserLayouts = await GetDefaultUserLayouts(applicationName);
            result.Layouts.AddRange(defaultUserLayouts.OrderBy(o => o.LayoutName));

            if (!userProfileExists)
                result.ActiveLayouts = UserLayoutPreferenceBuilder.CreateNew()
                    .ForApplication(applicationName)
                    .ForUserId(userID)
                    .ForLayouts(result.Layouts)
                    .Build();

            return result;
        }

        public async Task<bool> SaveUserProfile(UserProfileRequestData userProfileRequestData)
        {
            var userId = userProfileRequestData.UserID;
            var layoutData = userProfileRequestData.LayoutData;

            await EnsureUserProfileExists(userProfileRequestData.UserID, userProfileRequestData.LastApplicationName);

            var maxValue = await EnsureLayoutIsUpToDate(userId, layoutData);

            return await EnsureActiveLayoutIsUpToDate(userId, layoutData.ApplicationName, maxValue);
        }

        public async Task<bool> SaveLastApplicationName(string userID, string applicationName)
        {
            //return await _userProfileRepository.SaveLastApplicationName(Ldap, applicationName);
            
            var userProfileExists = await UserProfileExistsFor(userID);
            if (userProfileExists)
                return await _updateUserProfile.Handle(
                    UpdateUserProfilesCommand
                        .WithFilter(UserProfileFilter
                            .By(userID)
                            .AndByActive(true))
                        .SetAppName(applicationName)
                        .SetLastUpdateTimestamp(DateTime.Now)
                        
                );

            await CreateUserProfileFor(userID, applicationName);

            return true;
        }

        public async Task<string> GetLastApplicationName(string Ldap)
        {
           var userProfile = await _userProfiles.Handle(
                UserProfileFilter
                    .By(Ldap)
                    .AndByActive(true));
            if (userProfile == null ) return "";
            if (userProfile.Count()==0) return "";

            return userProfile[0].LastApplicationName;
        }

        public async Task<bool> UpdateActiveLayout(UserActiveLayoutRequestData userActiveLayoutRequestData)
        {
            return await EnsureActiveLayoutIsUpToDate(
                userActiveLayoutRequestData.UserID,
                userActiveLayoutRequestData.ApplicationName,
                userActiveLayoutRequestData.ActiveLayoutID);
        }

        public async Task<IReadOnlyList<FMPUserProfile>> GetUserRoleLocation(string LDAP)
        {
            var userProfiles = await _userProfiles.Handle(
               UserProfileFilter.By(LDAP));
            List<FMPUserProfile> result = new List<FMPUserProfile>();
            var user = await _users.Handle(UserFilter.By(LDAP).AndByActive(true));

            if (user == null)
            {
                var data = userProfiles;
                if (data != null)
                {
                    result.AddRange(data);
                }

                return result.OrderByDescending(x=>x.IsActive).ToList();
            }


            var activeProfiles = userProfiles;

            if (activeProfiles != null)
            {
                foreach (var activeProfile in activeProfiles)
                {
                    activeProfile.IsAdmin = user.IsAdmin;
                    activeProfile.IsDeveloper = user.IsDeveloper;
                    result.Add(activeProfile);
                }
                return result.OrderByDescending(x => x.IsActive).ToList();
            }


            return userProfiles;
        }

        public async Task<bool> SaveUserRoleLocation(UserRoleLocationRequestData userRoleLocationRequestData)
        {
            var userId = userRoleLocationRequestData.UserID;

            var userProfiles = await _userProfiles.Handle(
                UserProfileFilter.By(userId));

            var activeProfile = userProfiles.FirstOrDefault(s => s.IsActive);

            var profile = userProfiles.FirstOrDefault(a => a.RoleName == userRoleLocationRequestData.RoleName);

            await _updateUserProfile.Handle(
                UpdateUserProfilesCommand
                    .WithFilter(UserProfileFilter
                        .By(userId)
                        .AndByActive(true))
                    .SetActive(false)
            );

            if (profile == null)
            {
                var userProfile = FMPUserProfile.From(
                    userId);

                userProfile.LastApplicationName = activeProfile != null ? activeProfile.LastApplicationName : "";
                userProfile.RefreshInterval = activeProfile != null ? activeProfile.RefreshInterval : 0;
                userProfile.RoleName = userRoleLocationRequestData.RoleName;
                userProfile.FirstName = userRoleLocationRequestData.FirstName;
                userProfile.LastName = userRoleLocationRequestData.LastName;
                userProfile.ActiveLocations = userRoleLocationRequestData.ActiveLocations;

                await _createUserProfile.Handle(
                    CreateCommand<FMPUserProfile>.From(userProfile));

                return true;
            }

            var command = UpdateUserProfilesCommand
                .WithFilter(
                    UserProfileFilter.By(userId).AndByRole(profile.RoleName))
                .SetActive(true)
                .SetActiveLocations(userRoleLocationRequestData.ActiveLocations);

            var result = await _updateUserProfile.Handle(command);
            return result;
        }

        public async Task<bool> SaveUserRoleLocationList(List<MultipleUserRoleLocationRequestData> userRoleLocationRequestDataList)
        {
            var result = false;
            var userId = userRoleLocationRequestDataList[0].userID;
            var userProfiles = await _userProfiles.Handle(
                                UserProfileFilter.By(userId));
            var activeProfile = userProfiles.FirstOrDefault(s => s.IsActive);
            await _updateUserProfile.Handle(
                  UpdateUserProfilesCommand
                      .WithFilter(UserProfileFilter
                          .By(userId)
                          .AndByActive(true))
                      .SetActive(false)
              );
            var dataToProcess = userRoleLocationRequestDataList.OrderByDescending(x => x.isActive).ToList();
            foreach (var userRoleLocationRequestData in dataToProcess)
            {

                var profile = userProfiles.FirstOrDefault(a => a.RoleName == userRoleLocationRequestData.roleName);

                if (profile == null)
                {
                    var userProfile = FMPUserProfile.From(
                        userId);

                    userProfile.LastApplicationName = activeProfile != null ? activeProfile.LastApplicationName : "";
                    userProfile.RefreshInterval = activeProfile != null ? activeProfile.RefreshInterval : 0;
                    userProfile.RoleName = userRoleLocationRequestData.roleName;
                    //userProfile.FirstName = userRoleLocationRequestData.firstName;
                    //userProfile.LastName = userRoleLocationRequestData.lastName;
                    userProfile.ActiveLocations = userRoleLocationRequestData.activeLocations;
                    userProfile.IsActive = userRoleLocationRequestData.isActive;

                    await _createUserProfile.Handle(
                        CreateCommand<FMPUserProfile>.From(userProfile));

                    result = true;
                }
                if (profile!=null)
                {
                    var command = UpdateUserProfilesCommand
                   .WithFilter(
                       UserProfileFilter.By(userId).AndByRole(profile.RoleName))
                   .SetActive(userRoleLocationRequestData.isActive)
                   .SetActiveLocations(userRoleLocationRequestData.activeLocations)
                    .SetRoleName(userRoleLocationRequestData.roleName);

                    result = await _updateUserProfile.Handle(command);
                }

            }

            return result;
        }

        public async Task<bool> SaveRefreshIntervalInformation(string userID, string applicationName, int refreshInterval)
        {
            var exists = await UserProfileExistsFor(userID);

            if (exists)
            {
                var command = UpdateUserProfilesCommand
                    .WithFilter(UserProfileFilter
                        .By(userID)
                    )
                    .SetRefreshInterval(refreshInterval)
                    .UpdateMany();

                return await _updateUserProfile.Handle(command);
            }

            // THIS PROBABLY NEEDS CHANGING
            var userProfile = FMPUserProfile.From(
                userID);

            userProfile.LastApplicationName = applicationName;
            userProfile.RefreshInterval = refreshInterval;

            return await _createUserProfile.Handle(
                CreateCommand<FMPUserProfile>.From(userProfile));
        }

        public async Task<bool> SaveUserPreference(FMPUserProfile profile)
        {
            var command = UpdateUserProfilesCommand
                .WithFilter(UserProfileFilter.By(profile.UserID))
                .SetPreference(profile.SavedPreference)
                .UpdateMany();

            return await _updateUserProfile.Handle(command);
        }

        public async Task<bool> UpdateDbLayoutColumnMappings(string appName, string fromColumn, string toColumn)
        {
            return await _userProfileRepository.UpdateDbLayoutColumnMappings(appName, fromColumn, toColumn);
        }

        public async Task<bool> SaveReleaseNoteSetting(UserJsonPatchReleaseNote userReleaseNote)
        {
            switch (userReleaseNote.patchJson.op.ToLower())
            {
                // Add layout Favorite
                case "update":
                {
                    //TODO add convert validation here
                    var newReleaseNote = Convert.ToInt64(userReleaseNote.patchJson.value);
                    var command = UpdateUserProfilesCommand
                        .WithFilter(
                            UserProfileFilter.By(userReleaseNote.ldapAlias)
                        )
                        .SetLastReleaseNoteDismiss(newReleaseNote)
                        .UpdateMany();

                    return await _updateUserProfile.Handle(command);
                }
            }

            return true;
        }

        private async Task<IEnumerable<FMPLayout>> GetDefaultUserLayouts(string applicationName)
        {
            var layoutQuery = LayoutFilter
                .By(FMPUserProfile.SystemUserName)
                .AndByAppName(applicationName);

            var defaultUserLayouts = await _userLayouts.Handle(layoutQuery);

            return defaultUserLayouts;
        }

        private async Task EnsureUserProfileExists(string userID, string applicationName)
        {
            var userProfileExists = await UserProfileExistsFor(userID);

            if (!userProfileExists) await CreateUserProfileFor(userID, applicationName);
        }

        private async Task<int> EnsureLayoutIsUpToDate(string userId, LayoutData layoutData)
        {
            var layout = await GetLayoutFor(userId, layoutData);

            int maxValue;
            if (layout == null)
            {
                var newLayout = await CreateLayoutFor(userId, layoutData);
                maxValue = newLayout.LayoutID;
            }
            else
            {
                maxValue = layout.LayoutID;
                await _updateLayout.Handle(
                    UpdateLayoutCommand.WithFilter(
                        LayoutFilter.ById(layout._id)
                    ).SetFrom(layoutData)
                );
            }

            return maxValue;
        }

        private async Task<bool> EnsureActiveLayoutIsUpToDate(string userId,
            string application,
            int layoutId)
        {
            var activeLayout = await GetUserLayoutPreferenceFor(userId, application);

            bool result;
            if (activeLayout == null)
            {
                await CreateUserLayoutPreferenceFor(userId, application, layoutId);

                result = true;
            }
            else
            {
                result = await UpdateUserLayoutPreferenceFor(userId, application, layoutId);
            }

            return result;
        }

        private async Task<IEnumerable<FMPLayout>> UserLayoutsFor(string userId, string applicationName)
        {
            var userLayouts = await _userLayouts.Handle(
                LayoutFilter
                    .By(userId)
                    .AndByAppName(applicationName));

            return userLayouts;
        }

        private async Task<bool> UserProfileExistsFor(string userID)
        {
            var userProfileExists = await _userExists.Handle(
                UserProfileFilter.By(userID).AndByActive(true)
            );

            return userProfileExists;
        }

        private async Task CreateUserProfileFor(string userID, string applicationName)
        {
            var userProfile = FMPUserProfile.From(
                userID);

            if (applicationName != null) userProfile.LastApplicationName = applicationName;

            userProfile.CreationTimestamp = DateTime.Now;

            await _createUserProfile.Handle(
                CreateCommand<FMPUserProfile>.From(userProfile));
        }

        private async Task<FMPLayout> GetLayoutFor(string userId, LayoutData layoutData)
        {
            var layout = await _layoutForAppAndUser.Handle(
                LayoutFilter
                    .By(userId)
                    .AndByAppName(layoutData.ApplicationName)
                    .AndByLayoutName(layoutData.LayoutName)
            );
            return layout;
        }

        private async Task<FMPLayout> CreateLayoutFor(string userId, LayoutData layoutData)
        {
            var newLayout = FMPLayout.From(
                layoutData,
                userId);

            await _createLayoutCommandHandler.Handle(
                CreateCommand<FMPLayout>.From(newLayout));

            return newLayout;
        }

        private async Task<UserLayoutPreference> GetUserLayoutPreferenceFor(string userId, string applicationName)
        {
            var layoutQuery = UserLayoutPreferenceFilter
                .By(userId)
                .AndByAppName(applicationName);

            var activeLayout = await _userLayoutPreference.Handle(layoutQuery);

            return activeLayout;
        }

        private async Task CreateUserLayoutPreferenceFor(string userId,
            string application,
            int layoutId)
        {
            var activeLayoutsItem = UserLayoutPreference
                .CreateFrom(userId,
                    application,
                    layoutId);

            await _createUserLayoutPreference.Handle(
                CreateCommand<UserLayoutPreference>.From(activeLayoutsItem));
        }

        private async Task<bool> UpdateUserLayoutPreferenceFor(string userId,
            string application,
            int layoutId)
        {
            var command = UpdateUserLayoutPreferenceCommand
                .WithFilter(UserLayoutPreferenceFilter
                    .By(userId)
                    .AndByAppName(application))
                .SetActiveLayoutId(layoutId);

            var result = await _updateUserLayoutPreference.Handle(command);

            return result;
        }
    }
}