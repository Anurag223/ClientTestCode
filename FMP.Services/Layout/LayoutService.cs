/// <summary>
/// Schlumberger Private
/// Copyright 2018 Schlumberger.All rights reserved in Schlumberger
/// authored and generated code(including the selection and arrangement of
/// the source code base regardless of the authorship of individual files),
/// but not including any copyright interest(s) owned by a third party
/// related to source code or object code authored or generated by
/// non-Schlumberger personnel.
/// This source code includes Schlumberger confidential and/or proprietary
/// information and may include Schlumberger trade secrets.Any use,
/// disclosure and/or reproduction is prohibited unless authorized in
/// writing.
/// </summary>
using FMP.Model.LayoutDataModel;
using FMP.Model.UserProfileDataModel;
using FMP.Repository.Counter.Interface;
using FMP.Repository.Layout.Interface;
using FMP.Service.Layout.Interface;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using FMPLayout = FMP.Model.LayoutDataModel.Layout;

namespace FMP.Service.Layout
{
    /// <summary>
    /// Layout Service
    /// </summary>
    public class LayoutService : ILayoutService
    {
        private readonly ILayoutRepository _layoutRepository;
        private readonly ICounterRepository _counterRepository;
        private readonly ICommandHandler<IDeleteCommand<FMPLayout>> _deleteLayout;

        /// <summary>
        /// Layout repository initialization
        /// </summary>
        /// <param name="layoutRepository"></param>
        /// <param name="counterRepository"></param>
        /// <param name="deleteLayout"></param>
        public LayoutService(ILayoutRepository layoutRepository
            , ICounterRepository counterRepository,
            ICommandHandler<IDeleteCommand<FMPLayout>> deleteLayout)
        {
            _layoutRepository = layoutRepository;
            _counterRepository = counterRepository;
            _deleteLayout = deleteLayout;
        }

        /// <summary>
        ///  Get Layouts
        /// </summary>
        /// <param name="LDAP"></param>
        /// <param name="applicationName"></param>
        /// <returns></returns>
        public async Task<ColumnOptionData> GetLayouts(string LDAP, string applicationName)
        {
            ColumnOptionData result = new ColumnOptionData
            {
                Layouts = new List<Model.LayoutDataModel.Layout>()
            };

            result.Layouts.AddRange(_layoutRepository.GetLayouts("SystemUser", applicationName).Result);
            result.Layouts.AddRange(_layoutRepository.GetLayouts(LDAP, applicationName).Result);

            if (result.Layouts != null)
            {
                foreach (Model.LayoutDataModel.Layout layout in result.Layouts)
                {
                    layout.LayoutType = GetLayoutType(layout.UserID, layout.LayoutType);
                }
            }

            // Get Public favorites
            Task<List<int>> publicFavorites = _layoutRepository.GetPublicFavorites(LDAP, applicationName);
            if (publicFavorites != null && publicFavorites.Result != null)
            {
                foreach (int layoutId in publicFavorites.Result.ToArray())
                {
                    // Add public favorated layout
                    Task<Model.LayoutDataModel.Layout> layout = _layoutRepository.GetLayoutById(layoutId);
                    if (layout != null && layout.Result != null)
                        result.Layouts.Add(layout.Result);
                }
            }

            result.ActiveLayouts = new UserLayoutPreference();
            result.ActiveLayouts = _layoutRepository.GetActiveLayout(LDAP, applicationName).Result;
            return result;
        }

        /// <summary>
        /// Get Public Layout
        /// </summary>
        /// <param name="ldap"></param>
        /// <param name="applicationName"></param>
        /// <returns></returns>
        public Task<List<Model.LayoutDataModel.Layout>> GetPublicLayouts(string ldap, string applicationName)
        {
            Task<List<Model.LayoutDataModel.Layout>> publicLayouts = _layoutRepository.GetPublicLayouts(ldap, applicationName);
            if (publicLayouts != null && publicLayouts.Result != null)
            {
                // Get Public favorites
                Task<List<int>> publicFavorites = _layoutRepository.GetPublicFavorites(ldap, applicationName);
                foreach (Model.LayoutDataModel.Layout layout in publicLayouts.Result.ToArray())
                {
                    // Remove public favorite
                    if (publicFavorites != null && publicFavorites.Result != null && publicFavorites.Result.Contains(layout.LayoutID))
                    {
                        publicLayouts.Result.Remove(layout);
                    }
                }
            }
            return publicLayouts;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="layoutId"></param>
        /// <returns></returns>
        public async Task<bool> RemoveLayout(int layoutId)
        {
            var command = DeleteCommand<FMPLayout>.WithFilter(
                LayoutFilter.ByLayoutId(layoutId));

            return await _deleteLayout.Handle(command);
        }

        /// <summary>
        /// Inserts/updates Layout
        /// </summary>
        /// <param name="userProfileRequestData"></param>
        /// <returns></returns>
        public async Task<int> SaveLayout(UserProfileRequestData userProfileRequestData)
        {
            FMP.Model.LayoutDataModel.Layout existingLayout = _layoutRepository.GetLayoutByName(userProfileRequestData.UserID,
                userProfileRequestData.LayoutData.ApplicationName,
                userProfileRequestData.LayoutData.LayoutName);

            FMP.Model.LayoutDataModel.Layout layoutItem = existingLayout != null ? existingLayout : new FMP.Model.LayoutDataModel.Layout();

            layoutItem.LayoutID = userProfileRequestData.LayoutData.LayoutID;
            layoutItem.UserID = userProfileRequestData.UserID;
            layoutItem.LayoutType = GetLayoutType(userProfileRequestData.UserID, userProfileRequestData.LayoutData.LayoutType);
            layoutItem.ApplicationName = userProfileRequestData.LayoutData.ApplicationName;
            layoutItem.LayoutName = userProfileRequestData.LayoutData.LayoutName;
            layoutItem.LayoutConfigs = userProfileRequestData.LayoutData.LayoutConfigs;
            layoutItem.Sort = userProfileRequestData.LayoutData.Sort;
            layoutItem.Group = userProfileRequestData.LayoutData.Group;
            layoutItem.Filter = userProfileRequestData.LayoutData.Filter;

            if (existingLayout == null)
            {
                layoutItem.LayoutID = await _counterRepository.GetNextLayoutID();
                await _layoutRepository.InsertLayout(layoutItem);
            }
            else
            {
                await _layoutRepository.UpdateLayout(layoutItem);
            }
            return layoutItem.LayoutID;
        }

        /// <summary>
        /// Update Active Layout
        /// </summary>
        /// <param name="activeLayoutRequest"></param>
        /// <returns></returns>
        public Task<bool> UpdateActiveLayout(UserActiveLayoutRequestData activeLayoutRequest)
        {
            Task<UserLayoutPreference> activeLayout = _layoutRepository.GetActiveLayout(activeLayoutRequest.UserID, activeLayoutRequest.ApplicationName);
            if (activeLayout != null && activeLayout.Result != null)
            {
                return _layoutRepository.UpdateActiveLayout(activeLayoutRequest);
            }
            else
            {
                return _layoutRepository.InsertActiveLayout(activeLayoutRequest);
            }
        }

        /// <summary>
        /// Delete Layout
        /// </summary>
        /// <param name="LayoutId"></param>
        /// <param name="ldap"></param>
        /// <returns></returns>
        public async Task<bool> DeleteLayoutById(int LayoutId, string ldap)
        {
            if (_layoutRepository.DeleteLayoutByID(LayoutId, ldap).Result)
                return await _layoutRepository.RemoveLayoutFromPublicFavorites(LayoutId);
            else
                return false;
        }

        /// <summary>
        /// Updates Favorite Layout
        /// </summary>
        /// <param name="favoriteLayoutRequest"></param>
        /// <returns></returns>
        public async Task<bool> UpdateLayoutPatch(FavoriteLayoutRequest favoriteLayoutRequest)
        {
            switch (favoriteLayoutRequest.patchJson.path.ToLower())
            {
                case "favoritelayout":
                    return await UpdateFavoriteLayout(favoriteLayoutRequest);
                // More cases to come in future
                default:
                    break;
            }
            return true;
        }

        /// <summary>
        /// Update Favorite Layout
        /// </summary>
        /// <param name="favoriteLayoutRequest"></param>
        /// <returns></returns>
        public async Task<bool> UpdateFavoriteLayout(FavoriteLayoutRequest favoriteLayoutRequest)
        {
            switch (favoriteLayoutRequest.patchJson.op.ToLower())
            {
                // Add layout Favorite
                case "add":
                    return await _layoutRepository.AddLayoutAsFavorite(favoriteLayoutRequest);
                // Unfavorite layout from user's favorite list
                case "remove":
                    return await _layoutRepository.RemoveLayoutAsFavorite(favoriteLayoutRequest);
                default:
                    break;
            }
            return true;
        }

        private string GetLayoutType(string ldap, string layoutType)
        {
            if (string.IsNullOrWhiteSpace(layoutType))
            {
                return "SystemUser".Equals(ldap, StringComparison.InvariantCultureIgnoreCase) ? "System" : "Private";
            }
            return layoutType;
        }
    }
}
