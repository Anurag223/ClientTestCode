#region Header

/// <summary>
/// Schlumberger Private
/// Copyright 2018 Schlumberger.All rights reserved in Schlumberger
/// authored and generated code(including the selection and arrangement of
/// the source code base regardless of the authorship of individual files),
/// but not including any copyright interest(s) owned by a third party
/// related to source code or object code authored or generated by
/// non-Schlumberger personnel.
/// This source code includes Schlumberger confidential and/or proprietary
/// information and may include Schlumberger trade secrets.Any use,
/// disclosure and/or reproduction is prohibited unless authorized in
/// writing.
/// </summary>

#endregion

#pragma warning disable 1591

using System.Threading.Tasks;
using MongoDB.Driver;
using FMPLayout = FMP.Model.LayoutDataModel.Layout;

namespace FMP.Service.Layout
{
    public class LayoutKeyGenerator : KeyGenerator<FMPLayout>
    {
        public LayoutKeyGenerator(IMongoDbCollection<FMPLayout> collection)
            : base(collection)
        {
        }

        protected override void SetID(FMPLayout maxEntity, FMPLayout newEntity)
        {
            if (maxEntity == null) newEntity.LayoutID = 1;
            else newEntity.LayoutID = maxEntity.LayoutID + 1;
        }

        protected override SortDefinition<FMPLayout> Sort()
        {
            return Builders<FMPLayout>.Sort.Descending(o => o.LayoutID);
        }
    }

    public class CreateLayoutCommand : ICommand
    {
        private CreateLayoutCommand(FMPLayout layout)
        {
            Layout = layout;
        }

        public FMPLayout Layout { get; }

        public static CreateLayoutCommand From(FMPLayout layout)
        {
            return new CreateLayoutCommand(layout);
        }
    }

    public class CreateLayout : 
        HandlerBase<FMPLayout>,
        ICommandHandler<CreateLayoutCommand>
    {
        public CreateLayout(IMongoDbCollection<FMPLayout> layouts):
            base(layouts)
        {
        }

        public async Task<bool> Handle(CreateLayoutCommand command)
        {
            var options = new FindOptions<FMPLayout, FMPLayout>
            {
                Limit = 1,
                Sort = Builders<FMPLayout>.Sort.Descending(o => o.LayoutID)
            };

            var max = (await Collection.FindAsync(FilterDefinition<FMPLayout>.Empty, options)).FirstOrDefault();

            if (max == null) command.Layout.LayoutID = 1;
            else command.Layout.LayoutID = max.LayoutID + 1;
            
            await Collection.InsertOneAsync(command.Layout);

            return true;
        }
    }
}