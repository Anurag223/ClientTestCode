
#region Header

/// <summary>
/// Schlumberger Private
/// Copyright 2018 Schlumberger.All rights reserved in Schlumberger
/// authored and generated code(including the selection and arrangement of
/// the source code base regardless of the authorship of individual files),
/// but not including any copyright interest(s) owned by a third party
/// related to source code or object code authored or generated by
/// non-Schlumberger personnel.
/// This source code includes Schlumberger confidential and/or proprietary
/// information and may include Schlumberger trade secrets.Any use,
/// disclosure and/or reproduction is prohibited unless authorized in
/// writing.
/// </summary>

#endregion
using Slb.Ingestion.Pipeline.Service.DotNetClient.Data;
using System;
using System.IO;
using System.Threading.Tasks;
using LasUploader.DelfiUploader;
using Microsoft.AspNetCore.Http;

namespace Slb.Ingestion.Pipeline.Service.DotNetClient
{
    public class IngestionClientService
    {
        private readonly IngestionPipelineService ingestionPipelineService = new IngestionPipelineService();
        private readonly StorageClientService storageClientService = new StorageClientService();
        private readonly IngestionConfig config;
        private readonly string filePath;
        private readonly IFormFile formFile;
        private readonly string endPoint;
        private readonly string additionalProperties;


        public IngestionClientService(IngestionConfig config, string filePath, string endPoint, string additionalProperties)
        {
            this.config = config;
            this.additionalProperties = additionalProperties;
            this.filePath = filePath;
            this.endPoint = endPoint;
        }
        public IngestionClientService(IngestionConfig config, IFormFile file, string endPoint, string additionalProperties)
        {
            this.config = config;
            this.additionalProperties = additionalProperties;
            this.formFile = file;
            this.endPoint = endPoint;
        }


        private async Task<string> SubmitAsync()
        {
            if (!config.FileInput.Equals(InputType.clientLib))
            {
                throw new InvalidOperationException($"Only supported file input is {nameof(InputType.clientLib)}.  Given {config.FileInput}");
            }

            config.Authorization = await DelfiKeys.Instance.GetBearerToken();

            string landingZoneUrl = GetLandingZoneUrl(endPoint) + "?fileName=" + Path.GetFileName(filePath) + "&fileContentType=" + "";
            string bucketRelativePath = await storageClientService.UploadFileAsync(filePath, landingZoneUrl, config.Authorization, config.SlbDataPartitionId, 
                                        config.SlbOnBehalfOf, config.AppKey).ConfigureAwait(false);
            //string bucketRelativePath = await storageClientService.UploadFileAsyncFromFile(formFile, landingZoneUrl, config.Authorization, config.SlbAccountId,
            //                           config.SlbOnBehalfOf, config.AppKey).ConfigureAwait(false);

            UploadRequest uploadRequest = new UploadRequest(null, null, bucketRelativePath, InputType.clientLib.ToString(), config.Kind, config.Acl, config.Legaltags, config.IngestorRoutines, null, additionalProperties);
            return await ingestionPipelineService.Invoke(endPoint, uploadRequest, config.Authorization, config.SlbDataPartitionId, config.SlbOnBehalfOf, config.AppKey).ConfigureAwait(false);
        }


        private string GetLandingZoneUrl(string submitEndPoint)
        {
            string intialUrl = submitEndPoint.Replace("submit", "landingzoneUrl");
            return intialUrl;

        }


        public async Task<string> Submit()
        {
            try
            {
                return await SubmitAsync();
            }
            catch (AggregateException e)
            {
                foreach (var innerException in e.InnerExceptions)
                {
                    Console.WriteLine(innerException.GetType());
                    Console.WriteLine(innerException.Message);
                    Console.WriteLine(innerException.StackTrace);
                }

                throw new Exception("Submit Failed", e);
            }
        }
    }
}
