/// <summary>
/// Schlumberger Private
/// Copyright 2018 Schlumberger.All rights reserved in Schlumberger
/// authored and generated code(including the selection and arrangement of
/// the source code base regardless of the authorship of individual files),
/// but not including any copyright interest(s) owned by a third party
/// related to source code or object code authored or generated by
/// non-Schlumberger personnel.
/// This source code includes Schlumberger confidential and/or proprietary
/// information and may include Schlumberger trade secrets.Any use,
/// disclosure and/or reproduction is prohibited unless authorized in
/// writing.
/// </summary>
using FMP.Model.LayoutDataModel;
using FMP.Model.UserProfileDataModel;
using FMP.Repository.Interface;
using FMP.Repository.Layout.Interface;
using MongoDB.Bson;
using MongoDB.Driver;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace FMP.Repository
{
    /// <summary>
    /// Layout Repository
    /// </summary>
    public class LayoutRepository : ILayoutRepository
    {
        private IFMPContext dbContext;
        /// <summary>
        /// Initialize DB Context
        /// </summary>
        /// <param name="_dbContext"></param>
        public LayoutRepository(IFMPContext _dbContext)
        {
            dbContext = _dbContext;
        }

        /// <summary>
        ///  Returns All Layouts
        /// </summary>
        /// <returns></returns>
        public async Task<List<Model.LayoutDataModel.Layout>> GetLayouts()
        {
            return await dbContext.Layouts.Find(a => true).ToListAsync();
        }

        /// <summary>
        ///  Returns Layouts
        /// </summary>
        /// <param name="LDAP"></param>
        /// <param name="applicationName"></param>
        /// <returns></returns>
        public async Task<List<Model.LayoutDataModel.Layout>> GetLayouts(string LDAP, string applicationName)
        {
            return await dbContext.Layouts.Find(a => a.UserID.ToLower() == LDAP.ToLower() && a.ApplicationName.ToLower() == applicationName.ToLower()).ToListAsync();
        }

        /// <summary>
        /// Returns Public Layouts
        /// </summary>
        /// <param name="ldap"></param>
        /// <param name="applicationName"></param>
        /// <returns></returns>
        public async Task<List<Model.LayoutDataModel.Layout>> GetPublicLayouts(string ldap, string applicationName)
        {
            return await dbContext.Layouts.Find(a => a.UserID.ToLower() != ldap.ToLower() && a.ApplicationName.ToLower() == applicationName.ToLower() && a.LayoutType.ToLower() == "public").ToListAsync();
        }

        /// <summary>
        /// Insert Layout
        /// </summary>
        /// <param name="Layout"></param>
        /// <returns></returns>
        public async Task<int> InsertLayout(Model.LayoutDataModel.Layout Layout)
        {
            Layout._id = new ObjectId();
            await dbContext.Layouts.InsertOneAsync(Layout);
            return Layout.LayoutID;
        }

        /// <summary>
        /// Update Layout
        /// </summary>
        /// <param name="Layout"></param>
        /// <returns></returns>
        public async Task<bool> UpdateLayout(Model.LayoutDataModel.Layout layout)
        {
            FilterDefinition<FMP.Model.LayoutDataModel.Layout> filter = Builders<FMP.Model.LayoutDataModel.Layout>.Filter
                .Where(r => r.LayoutID == layout.LayoutID && r.UserID.ToLower() == layout.UserID.ToLower());
            UpdateDefinition<FMP.Model.LayoutDataModel.Layout> updatestatement = Builders<FMP.Model.LayoutDataModel.Layout>.Update
                .Set(l => l.LayoutType, layout.LayoutType)
                .Set(l => l.LayoutName, layout.LayoutName)
                .Set(l => l.LayoutConfigs, layout.LayoutConfigs)
                .Set(l => l.Sort, layout.Sort)
                .Set(l => l.Group, layout.Group)
                .Set(l => l.Filter, layout.Filter);
            UpdateResult updateResult = await dbContext.Layouts.UpdateOneAsync(filter, updatestatement);
            return updateResult != null && updateResult.IsAcknowledged && (updateResult.ModifiedCount > 0 || updateResult.MatchedCount > 0);
        }

        /// <summary>
        /// Update/Change Active Layout
        /// </summary>
        /// <param name="activeLayoutRequest"></param>
        /// <returns></returns>
        public async Task<bool> UpdateActiveLayout(UserActiveLayoutRequestData activeLayoutRequest)
        {
            FilterDefinition<UserLayoutPreference> filter = Builders<UserLayoutPreference>.Filter.Where(r => r.UserID.ToLower() == activeLayoutRequest.UserID.ToLower()
            && r.ApplicationName.ToLower() == activeLayoutRequest.ApplicationName.ToLower());
            UpdateDefinition<UserLayoutPreference> updatestatement = Builders<UserLayoutPreference>.Update.Set(l => l.ActiveLayoutID, activeLayoutRequest.ActiveLayoutID);
            UpdateResult updateResult = await dbContext.UserLayoutPreferences.UpdateOneAsync(filter, updatestatement);
            return updateResult != null && updateResult.IsAcknowledged && (updateResult.ModifiedCount > 0 || updateResult.MatchedCount > 0);
        }

        /// <summary>
        /// Delete Layout
        /// </summary>
        /// <param name="LayoutId"></param>
        /// <returns></returns>
        public async Task<bool> DeleteLayoutByID(int layoutId, string ldap)
        {
            FilterDefinition<Model.LayoutDataModel.Layout> filter = Builders<FMP.Model.LayoutDataModel.Layout>.Filter
                .Where(f => f.LayoutID == layoutId && f.UserID.ToLower() == ldap.ToLower());
            DeleteResult actionResult = await dbContext.Layouts.DeleteOneAsync(filter);
            return actionResult.IsAcknowledged && actionResult.DeletedCount > 0;
        }

        /// <summary>
        /// Returns Active Layout
        /// </summary>
        /// <param name="LDAP"></param>
        /// <param name="applicationName"></param>
        /// <returns></returns>
        public async Task<UserLayoutPreference> GetActiveLayout(string LDAP, string applicationName)
        {
            return dbContext.UserLayoutPreferences.Find(a => a.UserID.ToLower() == LDAP.ToLower() && a.ApplicationName.ToLower() == applicationName.ToLower()).FirstOrDefault();
        }

        public async Task<bool> InsertActiveLayout(UserActiveLayoutRequestData userProfileRequestData)
        {
            UserLayoutPreference activeLayoutsItem = new FMP.Model.LayoutDataModel.UserLayoutPreference
            {
                _id = ObjectId.GenerateNewId(),
                UserID = userProfileRequestData.UserID,
                ApplicationName = userProfileRequestData.ApplicationName,
                ActiveLayoutID = userProfileRequestData.ActiveLayoutID
            };
            await dbContext.UserLayoutPreferences.InsertOneAsync(activeLayoutsItem);
            return true;
        }

        /// <summary>
        /// Returns Public Favorite Layouts
        /// </summary>
        /// <param name="LDAP"></param>
        /// <param name="applicationName"></param>
        /// <returns></returns>
        public async Task<List<int>> GetPublicFavorites(string LDAP, string applicationName)
        {
            UserLayoutPreference result = dbContext.UserLayoutPreferences.Find(a => a.UserID.ToLower() == LDAP.ToLower() && a.ApplicationName.ToLower() == applicationName.ToLower()).FirstOrDefault();
            if (result != null)
            {
                return result.PublicFavorites;
            }
            return null;
        }

        /// <summary>
        /// Returns Layout By Layout Id
        /// </summary>
        /// <param name="layoutId"></param>
        /// <returns></returns>
        public async Task<Model.LayoutDataModel.Layout> GetLayoutById(int layoutId)
        {
            return dbContext.Layouts.Find(a => a.LayoutID == layoutId).FirstOrDefault();
        }

        /// <summary>
        /// Removes the layout from user's favorite list
        /// </summary>
        /// <param name="layoutId"></param>
        public async Task<bool> RemoveLayoutFromPublicFavorites(int layoutId)
        {
            List<UserLayoutPreference> userLayoutPreferences = dbContext.UserLayoutPreferences.Find(_ => true).ToList();
            foreach (UserLayoutPreference userLayoutPreference in userLayoutPreferences)
            {
                if (userLayoutPreference.PublicFavorites != null && userLayoutPreference.PublicFavorites.Exists(pf => pf == layoutId))
                {
                    userLayoutPreference.PublicFavorites.Remove(layoutId);
                    FilterDefinition<UserLayoutPreference> filter = Builders<UserLayoutPreference>.Filter.Where(r => r._id == userLayoutPreference._id);
                    UpdateDefinition<UserLayoutPreference> updatestatement = Builders<UserLayoutPreference>.Update.Set(l => l.PublicFavorites, userLayoutPreference.PublicFavorites);
                    UpdateResult updateResult = await dbContext.UserLayoutPreferences.UpdateOneAsync(filter, updatestatement);
                }
            }
            return true;
        }

        /// <summary>
        /// Checks if Layout exists
        /// </summary>
        /// <param name="userProfileRequestData"></param>
        /// <returns></returns>
        public Model.LayoutDataModel.Layout GetLayoutByName(string ldap, string application, string layoutName)
        {
            return dbContext.Layouts.Find(a => a.UserID.ToLower() == ldap.ToLower()
            && a.ApplicationName.ToLower() == application.ToLower()
            && a.LayoutName.ToLower() == layoutName.ToLower()).FirstOrDefault();
        }

        /// <summary>
        /// Add Layout to Favorite Layout list of User
        /// </summary>
        /// <param name="favoriteLayoutRequest"></param>
        /// <returns></returns>
        public async Task<bool> AddLayoutAsFavorite(FavoriteLayoutRequest favoriteLayoutRequest)
        {
            UserLayoutPreference userLayoutPreference = dbContext.UserLayoutPreferences.Find(a => a.UserID.ToLower() == favoriteLayoutRequest.ldap && a.ApplicationName.ToLower() == favoriteLayoutRequest.applicationName.ToLower()).FirstOrDefault();
            if (userLayoutPreference != null)
            {
                userLayoutPreference.PublicFavorites = userLayoutPreference.PublicFavorites != null ? userLayoutPreference.PublicFavorites : new List<int>();
                userLayoutPreference.PublicFavorites.Add(Convert.ToInt32(favoriteLayoutRequest.patchJson.value));
                FilterDefinition<UserLayoutPreference> filter = Builders<UserLayoutPreference>.Filter.Where(r => r._id == userLayoutPreference._id);
                UpdateDefinition<UserLayoutPreference> updatestatement = Builders<UserLayoutPreference>.Update.Set(l => l.PublicFavorites, userLayoutPreference.PublicFavorites);
                UpdateResult updateResult = await dbContext.UserLayoutPreferences.UpdateOneAsync(filter, updatestatement);
            }
            return true;
        }

        /// <summary>
        /// Remove Layout from Favorite Layout list of user
        /// </summary>
        /// <param name="favoriteLayoutRequest"></param>
        /// <returns></returns>
        public async Task<bool> RemoveLayoutAsFavorite(FavoriteLayoutRequest favoriteLayoutRequest)
        {
            UserLayoutPreference userLayoutPreference = dbContext.UserLayoutPreferences
                .Find(a => a.UserID.ToLower() == favoriteLayoutRequest.ldap && a.ApplicationName.ToLower() == favoriteLayoutRequest.applicationName.ToLower()).FirstOrDefault();
            if (userLayoutPreference != null && userLayoutPreference.PublicFavorites != null)
            {
                userLayoutPreference.PublicFavorites.Remove(Convert.ToInt32(favoriteLayoutRequest.patchJson.value));
                FilterDefinition<UserLayoutPreference> filter = Builders<UserLayoutPreference>.Filter.Where(r => r._id == userLayoutPreference._id);
                UpdateDefinition<UserLayoutPreference> updatestatement = Builders<UserLayoutPreference>.Update.Set(l => l.PublicFavorites, userLayoutPreference.PublicFavorites);
                UpdateResult updateResult = await dbContext.UserLayoutPreferences.UpdateOneAsync(filter, updatestatement);
            }
            return true;
        }
    }
}
