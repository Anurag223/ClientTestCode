/// Schlumberger Private
/// Copyright 2018 Schlumberger.All rights reserved in Schlumberger
/// authored and generated code(including the selection and arrangement of
/// the source code base regardless of the authorship of individual files),
/// but not including any copyright interest(s) owned by a third party
/// related to source code or object code authored or generated by
/// non-Schlumberger personnel.
/// This source code includes Schlumberger confidential and/or proprietary
/// information and may include Schlumberger trade secrets.Any use,
/// disclosure and/or reproduction is prohibited unless authorized in
/// writing.
/// </summary>

using FMP.Repository.Interface;
using FMP.Repository.User.Interface;
using System;
using System.Collections.Generic;
using System.Text;
using FMP.Model.UserDataModel;
using System.Threading.Tasks;
using MongoDB.Driver;
using MongoDB.Bson;

namespace FMP.Repository.User
{
    public class UserRepository : IUserRepository
    {
        private IFMPContext dbContext;

        public UserRepository(IFMPContext _dbContext)
        {
            dbContext = _dbContext;
        }

        /// <summary>
        /// Get All Active Users
        /// </summary>
        /// <returns></returns>
        public async Task<List<FMP.Model.UserDataModel.User>> GetUsers()
        {
            return await this.dbContext.User.Find(_ => true).ToListAsync();
        }

        public async Task<int> InsertUser(FMP.Model.UserDataModel.User user)
        {
            user._id = new ObjectId();
            await dbContext.User.InsertOneAsync(user);
            return user.GIN;
        }

        public async Task<bool> UpdateUser(FMP.Model.UserDataModel.User user)
        {
            FilterDefinition<FMP.Model.UserDataModel.User> filter = Builders<FMP.Model.UserDataModel.User>.Filter.Where(r => r.GIN == user.GIN);
            UpdateDefinition<FMP.Model.UserDataModel.User> updatestatement = Builders<FMP.Model.UserDataModel.User>.Update.Set(l => l.FirstName, user.FirstName)
                .Set(l => l.LastName, user.LastName).Set(l => l.Alias, user.Alias).Set(l => l.Email, user.Email)
                .Set(l => l.IsAdmin, user.IsAdmin).Set(l => l.IsDeveloper, user.IsDeveloper).Set(l => l.IsActive, user.IsActive);
            UpdateResult updateResult = await dbContext.User.UpdateOneAsync(filter, updatestatement);
            return updateResult != null && updateResult.IsAcknowledged && updateResult.ModifiedCount > 0;
        }

        public async Task<bool> DeleteUserByID(int gin)
        {
            FilterDefinition<FMP.Model.UserDataModel.User> filter = Builders<FMP.Model.UserDataModel.User>.Filter.Where(l => l.GIN == gin);
            UpdateDefinition<FMP.Model.UserDataModel.User> updatestatement = Builders<FMP.Model.UserDataModel.User>.Update.Set(l => l.IsActive, false);
            UpdateResult updateResult = await dbContext.User.UpdateOneAsync(filter, updatestatement);
            return updateResult != null && updateResult.IsAcknowledged && updateResult.ModifiedCount > 0;
        }

        public bool IsUserExists(int gin)
        {            
            return dbContext.User.Find(_ => true).ToList().FindAll(g => g.GIN == gin).Count > 0 ? true : false;
        }
    }
}
