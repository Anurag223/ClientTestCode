#region Header

/// <summary>
/// Schlumberger Private
/// Copyright 2018 Schlumberger.All rights reserved in Schlumberger
/// authored and generated code(including the selection and arrangement of
/// the source code base regardless of the authorship of individual files),
/// but not including any copyright interest(s) owned by a third party
/// related to source code or object code authored or generated by
/// non-Schlumberger personnel.
/// This source code includes Schlumberger confidential and/or proprietary
/// information and may include Schlumberger trade secrets.Any use,
/// disclosure and/or reproduction is prohibited unless authorized in
/// writing.
/// </summary>

#endregion

#pragma warning disable 1591
using System.Linq;
using System.Threading.Tasks;
using FizzWare.NBuilder;
using FluentAssertions;
using FMP.Service.UserProfile;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using MongoDB.Driver;
using FMPUserProfile = FMP.Model.UserProfileDataModel.UserProfile;

namespace FMP.Service.Integration.Test
{
    [TestClass]
    [IntegrationTestCategory]
    public class UpdateUserProfileTests : QueryHandlersTestBase
    {
        protected IMongoDbCollection<FMPUserProfile> UserProfilesColl;

        [TestInitialize]
        public void TestInitialize()
        {
            Init();
            UserProfilesColl = new MongoDbCollection<FMPUserProfile>(MongoDbClient);
        }

        [TestMethod]
        public async Task Handle_UpdateByIdAndStateApplicationName_Updated()
        {
            var testProfile = Builder<FMPUserProfile>.CreateNew().Build();
            testProfile.IsActive = true;

            await UserProfilesColl.Collection.InsertOneAsync(testProfile);

            var query = UpdateUserProfilesCommand
                .WithFilter(UserProfileFilter
                    .By(testProfile.UserID)
                    .AndByActive(true))
                .SetAppName("newName");

            var handler = new UpdateEntityHandler<FMPUserProfile>(UserProfilesColl);

            var result = await handler.Handle(query);

            result.Should().BeTrue();
            var created = await UserProfilesColl.Collection.Find(s => s.UserID.Equals(testProfile.UserID))
                .SingleOrDefaultAsync();
            created.Should().NotBeNull();
            created.LastApplicationName.Should().Be("newName");
        }

        [TestMethod]
        public async Task Handle_UpdateByIdAndStateIsActive_Updated()
        {
            var testProfile = Builder<FMPUserProfile>.CreateNew().Build();
            testProfile.IsActive = true;

            await UserProfilesColl.Collection.InsertOneAsync(testProfile);

            var query = UpdateUserProfilesCommand
                .WithFilter(UserProfileFilter
                    .By(testProfile.UserID)
                    .AndByActive(true))
                .SetActive(false);

            var handler = new UpdateEntityHandler<FMPUserProfile>(UserProfilesColl);

            var result = await handler.Handle(query);

            result.Should().BeTrue();
            var created = await UserProfilesColl.Collection.Find(s => s.UserID.Equals(testProfile.UserID))
                .SingleOrDefaultAsync();
            created.Should().NotBeNull();
            created.IsActive.Should().BeFalse();
        }

        [TestMethod]
        public async Task Handle_UpdateByIdAndRoleIsActive_Updated()
        {
            var testProfile = Builder<FMPUserProfile>.CreateNew().Build();
            testProfile.IsActive = true;

            await UserProfilesColl.Collection.InsertOneAsync(testProfile);


            var testProfile2 = Builder<FMPUserProfile>.CreateNew().Build();
            testProfile2.IsActive = true;
            testProfile2.RoleName = testProfile.RoleName + "_test";
            testProfile2.UserID = testProfile.UserID;

            await UserProfilesColl.Collection.InsertOneAsync(testProfile2);


            var query = UpdateUserProfilesCommand
                .WithFilter(
                    UserProfileFilter
                        .By(testProfile.UserID)
                        .AndByRole(testProfile.RoleName))
                .SetActive(false)
                .SetActiveLocations("newActiveLocation");

            var handler = new UpdateEntityHandler<FMPUserProfile>(UserProfilesColl);

            var result = await handler.Handle(query);

            result.Should().BeTrue();
            var updated = await UserProfilesColl.Collection.Find(s => s.UserID.Equals(testProfile.UserID))
                .ToListAsync();
            updated.Should().NotBeNull();
            updated.Count.Should().Be(2);
            var notActive = updated.Where(s => !s.IsActive).ToList();
            notActive.Should().NotBeNull();
            notActive.Count.Should().Be(1);
            notActive.First().RoleName.Should().Be(testProfile.RoleName);
            notActive.First().ActiveLocations.Should().Be("newActiveLocation");
        }
    }
}