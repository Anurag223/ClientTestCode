#region Header

/// <summary>
/// Schlumberger Private
/// Copyright 2018 Schlumberger.All rights reserved in Schlumberger
/// authored and generated code(including the selection and arrangement of
/// the source code base regardless of the authorship of individual files),
/// but not including any copyright interest(s) owned by a third party
/// related to source code or object code authored or generated by
/// non-Schlumberger personnel.
/// This source code includes Schlumberger confidential and/or proprietary
/// information and may include Schlumberger trade secrets.Any use,
/// disclosure and/or reproduction is prohibited unless authorized in
/// writing.
/// </summary>

#endregion

#pragma warning disable 1591
using System.Threading.Tasks;
using FluentAssertions;
using FMP.Service.User;
using FMP.Service.UserProfile;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using FMPUser = FMP.Model.UserDataModel.User;

namespace FMP.Service.Integration.Test
{
    [TestClass]
    [IntegrationTestCategory]
    public class GetUserTests : QueryHandlersTestBase
    {
        protected IMongoDbCollection<FMPUser> UserProfileColl;

        [TestInitialize]
        public void TestInitialize()
        {
            Init();
            UserProfileColl = new MongoDbCollection<FMPUser>(MongoDbClient);
        }

        [TestMethod]
        public async Task Handle_ExistingUser_User()
        {
            var userProfile = new FMPUser
            {
                Alias = "test",
                IsActive = true,
            };
            await UserProfileColl.Collection.InsertOneAsync(userProfile);
            var query = UserFilter.By("test").AndByActive(true);

            var handler = new GetHandler<FMPUser>(UserProfileColl);

            var result = await handler.Handle(query);

            result.Should().NotBeNull();
        }

        [TestMethod]
        public async Task Handle_ExistingUserNotActive_User()
        {
            var userProfile = new FMPUser
            {
                Alias = "test",
                IsActive = false,
            };
            await UserProfileColl.Collection.InsertOneAsync(userProfile);

            var query = UserFilter.By("test");

            var handler = new GetHandler<FMPUser>(UserProfileColl);

            var result = await handler.Handle(query);

            result.Should().NotBeNull();
        }
    }
}