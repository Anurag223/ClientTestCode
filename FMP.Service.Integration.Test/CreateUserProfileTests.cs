#region Header

/// <summary>
/// Schlumberger Private
/// Copyright 2018 Schlumberger.All rights reserved in Schlumberger
/// authored and generated code(including the selection and arrangement of
/// the source code base regardless of the authorship of individual files),
/// but not including any copyright interest(s) owned by a third party
/// related to source code or object code authored or generated by
/// non-Schlumberger personnel.
/// This source code includes Schlumberger confidential and/or proprietary
/// information and may include Schlumberger trade secrets.Any use,
/// disclosure and/or reproduction is prohibited unless authorized in
/// writing.
/// </summary>

#endregion

#pragma warning disable 1591
using System.Threading.Tasks;
using FizzWare.NBuilder;
using FluentAssertions;
using FMP.Service.UserProfile;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using MongoDB.Bson;
using MongoDB.Driver;
using FMPUserProfile = FMP.Model.UserProfileDataModel.UserProfile;

namespace FMP.Service.Integration.Test
{
    [TestClass]
    [IntegrationTestCategory]
    public class CreateUserProfileTests : QueryHandlersTestBase
    {
        protected IMongoDbCollection<FMPUserProfile> UserProfileColl;

        [TestInitialize]
        public void TestInitialize()
        {
            Init();
            UserProfileColl = new MongoDbCollection<FMPUserProfile>(MongoDbClient);
        }

        [TestMethod]
        public async Task Handle_NewUserProfile_Inserted()
        {
            var testLayout = Builder<FMPUserProfile>.CreateNew().Build();
            testLayout.ProfileGuid = ObjectId.GenerateNewId();

            testLayout = Builder<FMPUserProfile>.CreateNew().Build();

            var query = CreateCommand<FMPUserProfile>.From(testLayout);

            var keyGen = new UserProfileKeyGenerator(UserProfileColl);
            var handler = new CreateEntityHandler<FMPUserProfile>(UserProfileColl, keyGen);

            var result = await handler.Handle(query);

            result.Should().BeTrue();
            var created = await UserProfileColl.Collection.Find(s => s.UserID.Equals(testLayout.UserID))
                .SingleOrDefaultAsync();
            created.Should().NotBeNull();
        }
    }
}