#region Header

/// <summary>
/// Schlumberger Private
/// Copyright 2018 Schlumberger.All rights reserved in Schlumberger
/// authored and generated code(including the selection and arrangement of
/// the source code base regardless of the authorship of individual files),
/// but not including any copyright interest(s) owned by a third party
/// related to source code or object code authored or generated by
/// non-Schlumberger personnel.
/// This source code includes Schlumberger confidential and/or proprietary
/// information and may include Schlumberger trade secrets.Any use,
/// disclosure and/or reproduction is prohibited unless authorized in
/// writing.
/// </summary>

#endregion

#pragma warning disable 1591
using System.Linq;
using System.Threading.Tasks;
using FizzWare.NBuilder;
using FluentAssertions;
using FMP.Service.Layout;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using MongoDB.Driver;
using FMPLayout = FMP.Model.LayoutDataModel.Layout;

namespace FMP.Service.Integration.Test
{
    [TestClass]
    [IntegrationTestCategory]
    public class DeleteLayoutTests : QueryHandlersTestBase
    {
        protected IMongoDbCollection<FMPLayout> LayoutColl;

        [TestInitialize]
        public void TestInitialize()
        {
            Init();
            LayoutColl = new MongoDbCollection<FMPLayout>(MongoDbClient);
        }

        [TestMethod]
        public async Task Handle_ExistingLayout_Deleted()
        {
            var testLayout = Builder<FMPLayout>.CreateNew().Build();
            testLayout.LayoutID = 8888;

            await LayoutColl.Collection.InsertOneAsync(testLayout);

            var before = await LayoutColl.Collection.Find(s => s.UserID.Equals(testLayout.UserID))
                .SingleOrDefaultAsync();
            before.Should().NotBeNull();

            var command = DeleteCommand<FMPLayout>.WithFilter(
                    LayoutFilter.ByLayoutId(testLayout.LayoutID));

            var handler = new DeleteEntityHandler<FMPLayout>(LayoutColl);

            var result = await handler.Handle(command);

            result.Should().BeTrue();
            var deleted = await LayoutColl.Collection.Find(s => s.UserID.Equals(testLayout.UserID))
                .SingleOrDefaultAsync();
            deleted.Should().BeNull();
        }

        [TestMethod]
        public async Task Handle_NonExistingLayout_False()
        {
            var testLayoutId = 3333;
            var before = await LayoutColl.Collection.Find(s => s.LayoutID == testLayoutId)
                .SingleOrDefaultAsync();
            before.Should().BeNull();

            var command = DeleteCommand<FMPLayout>.WithFilter(
                LayoutFilter.ByLayoutId(testLayoutId));

            var handler = new DeleteEntityHandler<FMPLayout>(LayoutColl);

            var result = await handler.Handle(command);

            result.Should().BeFalse();
        }

        [TestMethod]
        public async Task Handle_ExistingLayoutByIdAdnName_Deleted()
        {
            var testLayout = Builder<FMPLayout>.CreateNew().Build();
            testLayout.LayoutID = 8888;
            var userId = testLayout.UserID;
            await LayoutColl.Collection.InsertOneAsync(testLayout);

            var testLayout2 = Builder<FMPLayout>.CreateNew().Build();
            testLayout2.UserID = testLayout.UserID + "22";
            testLayout2.LayoutID = testLayout.LayoutID;
            await LayoutColl.Collection.InsertOneAsync(testLayout2);

            var before = await LayoutColl.Collection.Find(s => s.LayoutID.Equals(testLayout.LayoutID))
                .ToListAsync();
            before.Should().NotBeNull();
            before.Count.Should().Be(2);

            var command = DeleteCommand<FMPLayout>.WithFilter(
                LayoutFilter.ByLayoutId(testLayout.LayoutID).AndByUserId(testLayout.UserID));

            var handler = new DeleteEntityHandler<FMPLayout>(LayoutColl);

            var result = await handler.Handle(command);

            result.Should().BeTrue();
            var deleted = await LayoutColl.Collection.Find(s => s.LayoutID.Equals(testLayout.LayoutID))
                .ToListAsync();
            deleted.Should().NotBeNull();
            deleted.Count.Should().Be(1);
            deleted.First().LayoutID.Should().Be(testLayout.LayoutID);
            deleted.First().UserID.Should().Be(testLayout2.UserID);
        }
    }
}