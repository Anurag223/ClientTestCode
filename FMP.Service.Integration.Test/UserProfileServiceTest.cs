#region Header

/// <summary>
/// Schlumberger Private
/// Copyright 2018 Schlumberger.All rights reserved in Schlumberger
/// authored and generated code(including the selection and arrangement of
/// the source code base regardless of the authorship of individual files),
/// but not including any copyright interest(s) owned by a third party
/// related to source code or object code authored or generated by
/// non-Schlumberger personnel.
/// This source code includes Schlumberger confidential and/or proprietary
/// information and may include Schlumberger trade secrets.Any use,
/// disclosure and/or reproduction is prohibited unless authorized in
/// writing.
/// </summary>

#endregion

#pragma warning disable 1591

using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using FizzWare.NBuilder;
using FluentAssertions;
using FMP.Model.LayoutDataModel;
using FMP.Model.UserProfileDataModel;
using FMP.Service.Layout;
using FMP.Service.User;
using FMP.Service.UserProfile;
using FMP.Service.UserProfile.Interface;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using MongoDB.Driver;
using FMPLayout = FMP.Model.LayoutDataModel.Layout;
using FMPUserProfile = FMP.Model.UserProfileDataModel.UserProfile;
using FMPUser = FMP.Model.UserDataModel.User;

namespace FMP.Service.Integration.Test
{
    [TestClass]
    [IntegrationTestCategory]
    public class UserProfileServiceTest : QueryHandlersTestBase
    {
        protected ICommandHandler<ICreateCommand<FMPLayout>> CreateLayout;
        protected ICommandHandler<ICreateCommand<UserLayoutPreference>> CreateUserLayoutPreference;
        protected ICommandHandler<ICreateCommand<FMPUserProfile>> CreateUserProfile;
        protected IMongoDbCollection<FMPLayout> FMPLayoutColl;
        protected IQueryHandler<IQuery<FMPLayout>, FMPLayout> LayoutForAppAndUser;
        protected ICommandHandler<IUpdateCommand<FMPLayout>> UpdateLayout;
        protected ICommandHandler<IUpdateCommand<UserLayoutPreference>> UpdateUserLayoutPreference;
        protected IQueryHandler<IQuery<FMPUserProfile>, bool> UserExists;
        protected IQueryHandler<IQuery<UserLayoutPreference>, UserLayoutPreference> UserLayoutPreference;
        protected IMongoDbCollection<UserLayoutPreference> UserLayoutPreferenceColl;
        protected IQueryHandler<IQuery<FMPLayout>, IReadOnlyList<FMPLayout>> UserLayouts;
        protected IMongoDbCollection<FMPUserProfile> UserProfileColl;
        protected ICommandHandler<IUpdateCommand<FMPUserProfile>> UpdateUserProfile;
        protected IQueryHandler<IQuery<FMPUserProfile>, FMPUserProfile> GetUserProfile;
        protected IQueryHandler<IQuery<FMPUser>, FMPUser> Users;
        protected IMongoDbCollection<FMPUser> FMPUserColl;
        protected IQueryHandler<IQuery<FMPUserProfile>, IReadOnlyList<FMPUserProfile>> UserProfiles;

        //IUserProfileService
        [TestInitialize]
        public void TestInitialize()
        {
            Init();
        }

        [TestCleanup]
        public void TestCleanup()
        {
        }

        protected override void Init()
        {
            base.Init();
            UserProfileColl = new MongoDbCollection<FMPUserProfile>(MongoDbClient);
            var name = ((MongoDbCollection<FMPUserProfile>) UserProfileColl).GetCollectionName();
            FMPLayoutColl = new MongoDbCollection<FMPLayout>(MongoDbClient);
            name = ((MongoDbCollection<FMPLayout>) FMPLayoutColl).GetCollectionName();
            UserLayoutPreferenceColl = new MongoDbCollection<UserLayoutPreference>(MongoDbClient);
            name = ((MongoDbCollection<UserLayoutPreference>) UserLayoutPreferenceColl).GetCollectionName();

            FMPUserColl = new MongoDbCollection<FMPUser>(MongoDbClient);

            var keyGen = new UserProfileKeyGenerator(UserProfileColl);
            var keyGenLayout = new LayoutKeyGenerator(FMPLayoutColl);

            var emptykeyGen = new EmptyKeyGenerator<UserLayoutPreference>();

            UserExists = new EntityExists<FMPUserProfile>(UserProfileColl);
            UserLayouts = new GetCollectionHandler<FMPLayout>(FMPLayoutColl);
            UserLayoutPreference = new GetHandler<UserLayoutPreference> (UserLayoutPreferenceColl);
            CreateUserProfile = new CreateEntityHandler<FMPUserProfile>(UserProfileColl, keyGen);
            UpdateUserProfile = new UpdateEntityHandler<FMPUserProfile>(UserProfileColl);
            GetUserProfile = new GetHandler<FMPUserProfile>(UserProfileColl);
            LayoutForAppAndUser = new GetHandler<FMPLayout>(FMPLayoutColl);

            UpdateLayout = new UpdateEntityHandler<FMPLayout>(FMPLayoutColl);
            UpdateUserLayoutPreference = new UpdateEntityHandler<UserLayoutPreference>(UserLayoutPreferenceColl);
            CreateUserLayoutPreference = new CreateEntityHandler<UserLayoutPreference>(UserLayoutPreferenceColl, emptykeyGen);
            CreateLayout = new CreateEntityHandler<FMPLayout>(FMPLayoutColl, keyGenLayout);
            Users= new GetHandler<FMPUser>(FMPUserColl);
            UserProfiles= new GetCollectionHandler<FMPUserProfile>(UserProfileColl);
        }

        protected IUserProfileService CreateUserProfileService()
        {
            return new UserProfileService(null,
                GetUserProfile,
                UserLayouts,
                UserExists,
                UserLayoutPreference,
                CreateUserProfile,
                LayoutForAppAndUser,
                CreateLayout,
                UpdateLayout,
                CreateUserLayoutPreference,
                UpdateUserLayoutPreference,
                UpdateUserProfile,
                Users,
                UserProfiles);
        }

        [TestMethod]
        public async Task GetUserProfile2_ExistingUser_ColumnOptionData()
        {
            var userId = "test";
            var layout = new FMPLayout
            {
                ApplicationName = ApplicationNames.WorkCenter,
                UserID = userId,
                LayoutID = 1,
                LayoutName = "My Layout",
                LayoutConfigs = new List<LayoutConfig>
                {
                    new LayoutConfig
                    {
                        LayoutName = "Default",
                        IsDefault = true,
                        disabled = false,
                        ColumnId = 1,
                        ColumnName = "LDAP Alias",
                        IsLocked = false,
                        Sequence = 1,
                        ToolTip = "Are you sure you want to reomve this column?"
                    }
                }
            };

            var layout2 = new FMPLayout
            {
                ApplicationName = ApplicationNames.WorkCenter,
                UserID = FMPUserProfile.SystemUserName,
                LayoutID = 3,
                LayoutName = "My Layout2",
                LayoutConfigs = new List<LayoutConfig>
                {
                    new LayoutConfig
                    {
                        LayoutName = "Default",
                        IsDefault = true,
                        disabled = false,
                        ColumnId = 1,
                        ColumnName = "LDAP Alias",
                        IsLocked = false,
                        Sequence = 1,
                        ToolTip = "Are you sure you want to reomve this column?"
                    }
                }
            };
            await Context.Layouts.InsertOneAsync(layout);
            await Context.Layouts.InsertOneAsync(layout2);

            //InitUserExists(true);

            //await InitFMPLayouts("test");

            var userProfile = new FMPUserProfile
            {
                ProfileID = 1,
                IsActive = true,
                UserID = userId
            };
            await Context.UserProfiles.InsertOneAsync(userProfile);

            var pref = new UserLayoutPreference
            {
                UserID = userId,
                ApplicationName = ApplicationNames.WorkCenter,
                ActiveLayoutID = 0
            };

            await Context.UserLayoutPreferences.InsertOneAsync(pref);

            var service = CreateUserProfileService();
            var result = await service.GetUserProfile(userId, ApplicationNames.WorkCenter);

            result.Should().NotBeNull();
            result.ActiveLayouts.Should().NotBeNull();
            result.ActiveLayouts.Should().BeEquivalentTo(pref);

            result.Layouts.Should().NotBeNull();
            result.Layouts.Count.Should().Be(2);
            result.Layouts.First().Should().BeEquivalentTo(layout);
            result.Layouts.Skip(1).First().Should().BeEquivalentTo(layout2);
        }

        [TestMethod]
        public async Task GetUserProfile2_UserDoesNotExist_ColumnOptionData()
        {
            var userId = "test2";
            var layout = new FMPLayout
            {
                ApplicationName = ApplicationNames.WorkCenter,
                UserID = userId,
                LayoutID = 1,
                LayoutName = "My Layout",
                LayoutConfigs = new List<LayoutConfig>
                {
                    new LayoutConfig
                    {
                        LayoutName = "Default",
                        IsDefault = true,
                        disabled = false,
                        ColumnId = 1,
                        ColumnName = "LDAP Alias",
                        IsLocked = false,
                        Sequence = 1,
                        ToolTip = "Are you sure you want to reomve this column?"
                    }
                }
            };

            var layout2 = new FMPLayout
            {
                ApplicationName = ApplicationNames.WorkCenter,
                UserID = FMPUserProfile.SystemUserName,
                LayoutID = 3,
                LayoutName = "My Layout2",
                LayoutConfigs = new List<LayoutConfig>
                {
                    new LayoutConfig
                    {
                        LayoutName = "Default",
                        IsDefault = true,
                        disabled = false,
                        ColumnId = 1,
                        ColumnName = "LDAP Alias",
                        IsLocked = false,
                        Sequence = 1,
                        ToolTip = "Are you sure you want to reomve this column?"
                    }
                }
            };
            await Context.Layouts.InsertOneAsync(layout2);

            var pref = new UserLayoutPreference
            {
                UserID = userId,
                ApplicationName = ApplicationNames.WorkCenter,
                ActiveLayoutID = 0
            };

            await Context.UserLayoutPreferences.InsertOneAsync(pref);

            var service = CreateUserProfileService();
            var result = await service.GetUserProfile(userId, ApplicationNames.WorkCenter);

            result.Should().NotBeNull();
            result.ActiveLayouts.Should().NotBeNull();
            result.ActiveLayouts.ApplicationName.Should().Be(ApplicationNames.WorkCenter);
            result.ActiveLayouts.UserID.Should().Be(userId);
            result.ActiveLayouts.ActiveLayoutID.Should().Be(1);

            result.Layouts.Should().NotBeNull();
            result.Layouts.Count.Should().Be(1);
            result.Layouts.First().Should().BeEquivalentTo(layout2);
        }

        [TestMethod]
        public async Task SaveUserProfile2_UserExistsLayoutExists_UserUpdated()
        {
            const string userId = "test2";
            const string layoutName = "My Layout2";

            var userProfile = new FMPUserProfile
            {
                ProfileID = 1,
                IsActive = true,
                UserID = userId
            };
            await Context.UserProfiles.InsertOneAsync(userProfile);

            var layout = new FMPLayout
            {
                ApplicationName = ApplicationNames.WorkCenter,
                UserID = userId,
                LayoutID = 12,
                LayoutName = layoutName,
                LayoutConfigs = new List<LayoutConfig>
                {
                    new LayoutConfig
                    {
                        LayoutName = "Default",
                        IsDefault = true,
                        disabled = false,
                        ColumnId = 1,
                        ColumnName = "LDAP Alias",
                        IsLocked = false,
                        Sequence = 1,
                        ToolTip = "Are you sure you want to reomve this column?"
                    }
                }
            };

            await Context.Layouts.InsertOneAsync(layout);

            var pref = new UserLayoutPreference
            {
                UserID = userId,
                ApplicationName = ApplicationNames.WorkCenter,
                ActiveLayoutID = 0
            };

            await Context.UserLayoutPreferences.InsertOneAsync(pref);

            var service = CreateUserProfileService();

            var userProfileRequestData = new UserProfileRequestData
            {
                UserID = userId,
                LayoutData = new LayoutData
                {
                    LayoutID = 777,
                    LayoutType = "Private",
                    ApplicationName = ApplicationNames.WorkCenter,
                    LayoutName = layoutName,
                    LayoutConfigs = new List<LayoutConfig>
                    {
                        Builder<LayoutConfig>.CreateNew().Build()
                    },
                    Sort = new List<SortConfigs>
                    {
                        Builder<SortConfigs>.CreateNew().Build()
                    },
                    Group = new List<GroupConfigs>
                    {
                        Builder<GroupConfigs>.CreateNew().Build()
                    },
                    Filter = new FilterConfigs
                    {
                        Filters = new List<FiltersFields>
                        {
                            Builder<FiltersFields>.CreateNew().Build()
                        },
                        Logic = "desc"
                    }
                    //Lock = new List<int> {1, 2, 3}
                }
            };

            var result = await service.SaveUserProfile(userProfileRequestData);

            result.Should().BeTrue();
            var layoutUpdated = await FMPLayoutColl.Collection.Find(f => f._id == layout._id).FirstAsync();
            layoutUpdated.Should().NotBeNull();
            layoutUpdated.LayoutConfigs.Should().BeEquivalentTo(userProfileRequestData.LayoutData.LayoutConfigs);
            layoutUpdated.Sort.Should().BeEquivalentTo(userProfileRequestData.LayoutData.Sort);
            layoutUpdated.Group.Should().BeEquivalentTo(userProfileRequestData.LayoutData.Group);
            layoutUpdated.Filter.Should().BeEquivalentTo(userProfileRequestData.LayoutData.Filter);

            var prefUpdated = await UserLayoutPreferenceColl.Collection.Find(x =>
                x.UserID == userId &&
                x.ApplicationName == ApplicationNames.WorkCenter).FirstOrDefaultAsync();

            prefUpdated.Should().NotBeNull();
            prefUpdated.ActiveLayoutID.Should().Be(layout.LayoutID);
        }

        [TestMethod]
        public async Task SaveUserProfile2_UserDoesNotExist_UserUpdated()
        {
            const string userId = "test2";
            const string layoutName = "My Layout2";

            var layout = new FMPLayout
            {
                ApplicationName = ApplicationNames.WorkCenter,
                UserID = userId,
                LayoutID = 12,
                LayoutName = layoutName,
                LayoutConfigs = new List<LayoutConfig>
                {
                    new LayoutConfig
                    {
                        LayoutName = "Default",
                        IsDefault = true,
                        disabled = false,
                        ColumnId = 1,
                        ColumnName = "LDAP Alias",
                        IsLocked = false,
                        Sequence = 1,
                        ToolTip = "Are you sure you want to reomve this column?"
                    }
                }
            };

            await Context.Layouts.InsertOneAsync(layout);

            var pref = new UserLayoutPreference
            {
                UserID = userId,
                ApplicationName = ApplicationNames.WorkCenter,
                ActiveLayoutID = 0
            };

            await Context.UserLayoutPreferences.InsertOneAsync(pref);

            var service = CreateUserProfileService();

            var userProfileRequestData = new UserProfileRequestData
            {
                UserID = userId,
                LayoutData = new LayoutData
                {
                    LayoutID = 777,
                    LayoutType = "Private",
                    ApplicationName = ApplicationNames.WorkCenter,
                    LayoutName = layoutName,
                    LayoutConfigs = new List<LayoutConfig>
                    {
                        Builder<LayoutConfig>.CreateNew().Build()
                    },
                    Sort = new List<SortConfigs>
                    {
                        Builder<SortConfigs>.CreateNew().Build()
                    },
                    Group = new List<GroupConfigs>
                    {
                        Builder<GroupConfigs>.CreateNew().Build()
                    },
                    Filter = new FilterConfigs
                    {
                        Filters = new List<FiltersFields>
                        {
                            Builder<FiltersFields>.CreateNew().Build()
                        },
                        Logic = "desc"
                    }
                    
                }
            };

            var result = await service.SaveUserProfile(userProfileRequestData);

            result.Should().BeTrue();
            var userProfileCreated = await UserProfileColl.Collection.Find(f => f.UserID == userId).FirstAsync();
            userProfileCreated.Should().NotBeNull();

            var layoutUpdated = await FMPLayoutColl.Collection.Find(f => f._id == layout._id).FirstAsync();
            layoutUpdated.Should().NotBeNull();
            layoutUpdated.LayoutConfigs.Should().BeEquivalentTo(userProfileRequestData.LayoutData.LayoutConfigs);
            layoutUpdated.Sort.Should().BeEquivalentTo(userProfileRequestData.LayoutData.Sort);
            layoutUpdated.Group.Should().BeEquivalentTo(userProfileRequestData.LayoutData.Group);
            layoutUpdated.Filter.Should().BeEquivalentTo(userProfileRequestData.LayoutData.Filter);

            var prefUpdated = await UserLayoutPreferenceColl.Collection.Find(x =>
                x.UserID == userId &&
                x.ApplicationName == ApplicationNames.WorkCenter).FirstOrDefaultAsync();

            prefUpdated.Should().NotBeNull();
            prefUpdated.ActiveLayoutID.Should().Be(layout.LayoutID);
        }

        [TestMethod]
        public async Task SaveLastApplicationName_UserDoesNotExist_UserCreateWithAppName()
        {
            const string userId = "test2";
            const string appName = "appName_test";

            var service = CreateUserProfileService();

            var result = await service.SaveLastApplicationName(userId, appName);

            result.Should().BeTrue();
            var userProfileCreated = await UserProfileColl.Collection.Find(f => f.UserID == userId).FirstAsync();
            userProfileCreated.Should().NotBeNull();

            userProfileCreated.LastApplicationName.Should().Be(appName);
        }

        [TestMethod]
        public async Task SaveLastApplicationName_UserExists_UserUpdatedWithAppName()
        {
            const string userId = "test2";
            const string appName = "appName_test";

            var userProfile = new FMPUserProfile
            {
                ProfileID = 1,
                IsActive = true,
                UserID = userId
            };
            await Context.UserProfiles.InsertOneAsync(userProfile);

            var service = CreateUserProfileService();

            var result = await service.SaveLastApplicationName(userId, appName);

            result.Should().BeTrue();
            var userProfileCreated = await UserProfileColl.Collection.Find(f => f.UserID == userId).FirstAsync();
            userProfileCreated.Should().NotBeNull();

            userProfileCreated.LastApplicationName.Should().Be(appName);
        }

        [TestMethod]
        public async Task GetLastApplicationName_UserExists_AppName()
        {
            const string userId = "test2";
            const string appName = "appName_test";

            var userProfile = new FMPUserProfile
            {
                ProfileID = 1,
                IsActive = true,
                UserID = userId,
                LastApplicationName = appName
            };
            await Context.UserProfiles.InsertOneAsync(userProfile);

            var service = CreateUserProfileService();

            var result = await service.GetLastApplicationName(userId);

            result.Should().NotBeNull();
            result.Should().NotBeEmpty();
            result.Should().Be(appName);
        }

        [TestMethod]
        public async Task UpdateActiveLayout_ActiveLayoutExists_ActiveLayoutUpdated()
        {
            const string userId = "test2";
            const string appName = "UpdateActiveLayout_ActiveLayoutExists_ActiveLayoutUpdated";

            var userActiveLayoutRequestData = new UserActiveLayoutRequestData()
            {
                UserID = userId,
                ApplicationName = appName,
                ActiveLayoutID = 5
            };

            var pref = new UserLayoutPreference()
            {
                UserID = userId,
                ApplicationName = appName,
                ActiveLayoutID = 1
            };
         
            await UserLayoutPreferenceColl.Collection.InsertOneAsync(pref);

            var service = CreateUserProfileService();

            var result = await service.UpdateActiveLayout(userActiveLayoutRequestData);

            result.Should().BeTrue();
            var userLayoutPreferenceUpdated = await UserLayoutPreferenceColl.Collection.Find(
                f => f.UserID == userId &&
                     f.ApplicationName == appName
                     )
                .FirstAsync();
            userLayoutPreferenceUpdated.ActiveLayoutID.Should().Be(userActiveLayoutRequestData.ActiveLayoutID);
        }

        [TestMethod]
        public async Task UpdateActiveLayout_ActiveLayoutDoesNotExist_ActiveLayoutCreated()
        {
            const string userId = "test2";
            const string appName = "UpdateActiveLayout_ActiveLayoutDoesNotExist_ActiveLayoutCreated";

            var userActiveLayoutRequestData = new UserActiveLayoutRequestData()
            {
                UserID = userId,
                ApplicationName = appName,
                ActiveLayoutID = 5
            };
           
            var service = CreateUserProfileService();

            var result = await service.UpdateActiveLayout(userActiveLayoutRequestData);

            result.Should().BeTrue();
            var userLayoutPreferenceUpdated = await UserLayoutPreferenceColl.Collection.Find(
                    f => f.UserID == userId &&
                         f.ApplicationName == appName
                )
                .FirstAsync();
            userLayoutPreferenceUpdated.ActiveLayoutID.Should().Be(userActiveLayoutRequestData.ActiveLayoutID);
        }
    }
}